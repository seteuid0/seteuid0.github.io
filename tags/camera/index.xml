<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>camera on seteuid0's blog</title><link>/tags/camera/</link><description>Recent content in camera on seteuid0's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This is a customized copyright.</copyright><lastBuildDate>Tue, 20 Aug 2019 13:28:31 +0000</lastBuildDate><atom:link href="/tags/camera/index.xml" rel="self" type="application/rss+xml"/><item><title>[ZZ]v4l2的学习建议和流程解析</title><link>/posts/zzv4l2%e7%9a%84%e5%ad%a6%e4%b9%a0%e5%bb%ba%e8%ae%ae%e5%92%8c%e6%b5%81%e7%a8%8b%e8%a7%a3%e6%9e%90/</link><pubDate>Tue, 20 Aug 2019 13:28:31 +0000</pubDate><guid>/posts/zzv4l2%e7%9a%84%e5%ad%a6%e4%b9%a0%e5%bb%ba%e8%ae%ae%e5%92%8c%e6%b5%81%e7%a8%8b%e8%a7%a3%e6%9e%90/</guid><description>最近设计摄像头相关工作，之前虽然断断续续对V4L有些了解但不系统，在网上搜索了下发现V4L2应用还是非常广泛，所以资料也非常多，转载一片整理的比较全面的，就不重复造轮子了。 原文地址：https://www.cnblogs.com/silence-hust/p/4464291.html v4l2，一开始听到这个名词的时候，以为又是一个很难很难的模块，涉及到视频的处理，后来在网上各种找资料后，才发现其实v4l2已经分装好了驱动程序，只要我们根据需要调用相应的接口和函数，从而实现视频的获取和处理。只要认真的看几篇文章就对v4l2有一定的了解了，由于是第一次接触，网上的资料良莠不齐，难得可以找到几篇自己感觉很不错的。记录下来：（没必要看太多，很多都是一样的意思） http://www.embedu.org/Column/Column320.htm 这篇是不错的介绍，很讨厌有弹窗 http://www.cnblogs.com/emouse/archive/2013/03/04/2943243.html 这个可以作为第一篇来看，博主整理的不错 http://blog.chinaunix.net/uid-11765716-id-2855735.html 这篇也比较详细 http://blog.csdn.net/ddddwant/article/details/8475211 这篇提到的问题和我遇到的一样，花屏了，内存没有读取好 http://my.oschina.net/u/1024767/blog/210801#OSC_h2_14 对capture.c文件的解读 http://blog.csdn.net/g_salamander/article/details/8107692 对各个结构体有比较好的说明 一、Video for Linux two v4l2为linux下视频设备程序提供了一套接口规范。包括一套数据结构和底层V4L2驱动接口。只能在linux下使用。它使程序有发现设备和操作设备的能力。它主要是用一系列的回调函数来实现这些功能。像设置摄像头的频率、帧频、视频压缩格式和图像参数等等。当然也可以用于其他多媒体的开发，如音频等。 在Linux下，所有外设都被看成一种特殊的文件，成为“设备文件”，可以象访问普通文件一样对其进行读写。一般来说，采用V4L2驱动的摄像头设备文是/dev/v4l/video0。为了通用，可以建立一个到/dev/video0的链接。V4L2支持两种方式来采集图像：内存映射方式(mmap)和直接读取方式(read)。V4L2在include/linux/videodev.h文件中定义了一些重要的数据结构，在采集图像的过程中，就是通过对这些数据的操作来获得最终的图像数据。Linux系统V4L2的能力可在Linux内核编译阶段配置，默认情况下都有此开发接口。V4L2从Linux 2.5.x版本的内核中开始出现。
　V4L2规范中不仅定义了通用API元素(Common API Elements)，图像的格式(Image Formats)，输入/输出方法(Input/Output)，还定义了Linux内核驱动处理视频信息的一系列接口(Interfaces)，这些接口主要有：
　视频采集接口——Video Capture Interface; 视频输出接口—— Video Output Interface; 视频覆盖/预览接口——Video Overlay Interface; 视频输出覆盖接口——Video Output Overlay Interface; 编解码接口——Codec Interface。
二、v4l2结构体介绍 1、常用的结构体在内核目录include/linux/videodev2.h中定义
 struct v4l2_requestbuffers //申请帧缓冲，对应命令VIDIOC_REQBUFS struct v4l2_capability //视频设备的功能，对应命令VIDIOC_QUERYCAP struct v4l2_input //视频输入信息，对应命令VIDIOC_ENUMINPUT struct v4l2_standard //视频的制式，比如PAL，NTSC，对应命令VIDIOC_ENUMSTD struct v4l2_format //帧的格式，对应命令VIDIOC_G_FMT、VIDIOC_S_FMT等 struct v4l2_buffer //驱动中的一帧图像缓存，对应命令VIDIOC_QUERYBUF struct v4l2_crop //视频信号矩形边框 v4l2_std_id //视频制式</description></item></channel></rss>