<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>seteuid0's blog</title><link>/</link><description>Recent content on seteuid0's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This is a customized copyright.</copyright><lastBuildDate>Sun, 18 Apr 2021 11:16:32 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>pcre使用</title><link>/posts/pcre_use/</link><pubDate>Thu, 14 Mar 2013 06:22:00 +0000</pubDate><guid>/posts/pcre_use/</guid><description>seteuid0's blog /posts/pcre_use/ -&lt;p>在网上找到的pcre使用的资料，PCRE是一个NFA正则引擎，不然不能提供完全与Perl一致的正则语法功能。但它同时也实现了DFA，只是满足数学意义上的正则。PCRE提供了19个接口函数，为了简单介绍，使用PCRE内带的测试程序(pcretest.c)示例用法。1. pcre_compile原型：#include &amp;lt;pcre.h&amp;gt;pcre *pcre_compile(const char *pattern, int options, const char **errptr, int *erroffset, const unsigned char *tableptr);功能：将一个正则表达式编译成一个内部表示，在匹配多个字符串时，可以加速匹配。其同pcre_compile2功能一样只是缺少一个参数errorcodeptr。参数：pattern    正则表达式options     为0，或者其他参数选项errptr       出错消息erroffset  出错位置tableptr   指向一个字符数组的指针，可以设置为空NULL示例：L1720     re = pcre_compile((char *)p, options, &amp;amp;error, &amp;amp;erroroffset, tables);2. pcre_compile2原型：#include &amp;lt;pcre.h&amp;gt;pcre *pcre_compile2(const char *pattern, int options, int *errorcodeptr, const char **errptr, int *erroffset, const unsigned char *tableptr);功能：将一个正则表达式编译成一个内部表示，在匹配多个字符串时，可以加速匹配。其同pcre_compile功能一样只是多一个参数errorcodeptr。参数：pattern    正则表达式options     为0，或者其他参数选项errorcodeptr    存放出错码errptr       出错消息erroffset  出错位置tableptr   指向一个字符数组的指针，可以设置为空NULL3. pcre_config原型：#include &amp;lt;pcre.h&amp;gt;int pcre_config(int what, void *where);功能：查询当前PCRE版本中使用的选项信息。参数：what         选项名where       存储结果的位置示例：Line1312 (void)pcre_config(PCRE_CONFIG_POSIX_MALLOC_THRESHOLD, &amp;amp;rc);4. pcre_copy_named_substring原型：#include &amp;lt;pcre.h&amp;gt;int pcre_copy_named_substring(const pcre *code, const char *subject, int *ovector, int stringcount, const char *stringname, char *buffer, int buffersize);功能：根据名字获取捕获的字串。参数：code                            成功匹配的模式subject               匹配的串ovector              pcre_exec() 使用的偏移向量stringcount   pcre_exec()的返回值stringname       捕获字串的名字buffer                 用来存储的缓冲区buffersize                   缓冲区大小示例：Line2730 int rc = pcre_copy_named_substring(re, (char *)bptr, use_offsets,count, (char *)copynamesptr, copybuffer, sizeof(copybuffer));5. pcre_copy_substring原型：#include &amp;lt;pcre.h&amp;gt;int pcre_copy_substring(const char *subject, int *ovector, int stringcount, int stringnumber, char *buffer, int buffersize);功能：根据编号获取捕获的字串。参数：code                            成功匹配的模式subject               匹配的串ovector              pcre_exec() 使用的偏移向量stringcount   pcre_exec()的返回值stringnumber   捕获字串编号buffer                 用来存储的缓冲区buffersize                   缓冲区大小示例：Line2730 int rc = pcre_copy_substring((char *)bptr, use_offsets, count,i, copybuffer, sizeof(copybuffer));6. pcre_dfa_exec原型：#include &amp;lt;pcre.h&amp;gt;int pcre_dfa_exec(const pcre *code, const pcre_extra *extra, const char *subject, int length, int startoffset, int options, int *ovector, int ovecsize, int *workspace, int wscount);功能：使用编译好的模式进行匹配，采用的是一种非传统的方法DFA，只是对匹配串扫描一次（与Perl不兼容）。参数：code                   编译好的模式extra         指向一个pcre_extra结构体，可以为NULLsubject    需要匹配的字符串length       匹配的字符串长度（Byte）startoffset        匹配的开始位置options     选项位ovector    指向一个结果的整型数组ovecsize   数组大小workspace        一个工作区数组wscount   数组大小示例：Line2730 count = pcre_dfa_exec(re, extra, (char *)bptr, len, start_offset,options | g_notempty, use_offsets, use_size_offsets, workspace,sizeof(workspace)/sizeof(int));7. pcre_copy_substring原型：#include &amp;lt;pcre.h&amp;gt;int pcre_exec(const pcre *code, const pcre_extra *extra, const char *subject, int length, int startoffset, int options, int *ovector, int ovecsize);功能：使用编译好的模式进行匹配，采用与Perl相似的算法，返回匹配串的偏移位置。。参数：code                   编译好的模式extra         指向一个pcre_extra结构体，可以为NULLsubject    需要匹配的字符串length       匹配的字符串长度（Byte）startoffset        匹配的开始位置options     选项位ovector    指向一个结果的整型数组ovecsize   数组大小8. pcre_free_substring原型：#include &amp;lt;pcre.h&amp;gt;void pcre_free_substring(const char *stringptr);功能：释放pcre_get_substring()和pcre_get_named_substring()申请的内存空间。参数：stringptr            指向字符串的指针示例：Line2730        const char *substring;int rc = pcre_get_substring((char *)bptr, use_offsets, count,i, &amp;amp;substring);……pcre_free_substring(substring);9. pcre_free_substring_list原型：#include &amp;lt;pcre.h&amp;gt;void pcre_free_substring_list(const char **stringptr);功能：释放由pcre_get_substring_list申请的内存空间。参数：stringptr            指向字符串数组的指针示例：Line2773        const char **stringlist;int rc = pcre_get_substring_list((char *)bptr, use_offsets, count,……pcre_free_substring_list(stringlist);10. pcre_fullinfo原型：#include &amp;lt;pcre.h&amp;gt;int pcre_fullinfo(const pcre *code, const pcre_extra *extra, int what, void *where);功能：返回编译出来的模式的信息。参数：code          编译好的模式extra         pcre_study()的返回值，或者NULLwhat         什么信息where       存储位置示例：Line997          if ((rc = pcre_fullinfo(re, study, option, ptr)) &amp;lt; 0)fprintf(outfile, &amp;ldquo;Error %d from pcre_fullinfo(%d)/n&amp;rdquo;, rc, option);}11. pcre_get_named_substring原型：#include &amp;lt;pcre.h&amp;gt;int pcre_get_named_substring(const pcre *code, const char *subject, int *ovector, int stringcount, const char *stringname, const char **stringptr);功能：根据编号获取捕获的字串。参数：code                            成功匹配的模式subject               匹配的串ovector              pcre_exec() 使用的偏移向量stringcount   pcre_exec()的返回值stringname       捕获字串的名字stringptr     存放结果的字符串指针示例：Line2759        const char *substring;int rc = pcre_get_named_substring(re, (char *)bptr, use_offsets,count, (char *)getnamesptr, &amp;amp;substring);12. pcre_get_stringnumber原型：#include &amp;lt;pcre.h&amp;gt;int pcre_get_stringnumber(const pcre *code, const char *name);功能：根据命名捕获的名字获取对应的编号。参数：code                            成功匹配的模式name                 捕获名字13. pcre_get_substring原型：#include &amp;lt;pcre.h&amp;gt;int pcre_get_substring(const char *subject, int *ovector, int stringcount, int stringnumber, const char **stringptr);功能：获取匹配的子串。参数：subject       成功匹配的串ovector       pcre_exec() 使用的偏移向量stringcount    pcre_exec()的返回值stringnumber  获取的字符串编号stringptr      字符串指针14. pcre_get_substring_list原型：#include &amp;lt;pcre.h&amp;gt;int pcre_get_substring_list(const char *subject, int *ovector, int stringcount, const char ***listptr);功能：获取匹配的所有子串。参数：subject       成功匹配的串ovector       pcre_exec() 使用的偏移向量stringcount    pcre_exec()的返回值listptr             字符串列表的指针15. pcre_info原型：#include &amp;lt;pcre.h&amp;gt;int pcre_info(const pcre *code, int *optptr, int *firstcharptr);已过时，使用pcre_fullinfo替代。16. pcre_maketables原型：#include &amp;lt;pcre.h&amp;gt;const unsigned char *pcre_maketables(void);功能：生成一个字符表，表中每一个元素的值不大于256，可以用它传给pcre_compile()替换掉内建的字符表。参数：示例：Line2759 tables = pcre_maketables();17. pcre_refcount原型：#include &amp;lt;pcre.h&amp;gt;int pcre_refcount(pcre *code, int adjust);功能：编译模式的引用计数。参数：code       已编译的模式adjust      调整的引用计数值18. pcre_study原型：#include &amp;lt;pcre.h&amp;gt;pcre_extra *pcre_study(const pcre *code, int options, const char **errptr);功能：对编译的模式进行学习，提取可以加速匹配过程的信息。参数：code      已编译的模式options    选项errptr     出错消息示例：Line1797 extra = pcre_study(re, study_options, &amp;amp;error);19. pcre_version原型：#include &amp;lt;pcre.h&amp;gt;char *pcre_version(void);功能：返回PCRE的版本信息。参数：示例：Line1384 if (!quiet) fprintf(outfile, &amp;ldquo;PCRE version %s/n/n&amp;rdquo;, pcre_version());程序实例：[cpp] view plaincopy#define PCRE_STATIC // 静态库编译选项  #include &amp;lt;stdio.h&amp;gt;  #include &amp;lt;string.h&amp;gt;  #include &amp;lt;pcre.h&amp;gt;  #define OVECCOUNT 30 /* should be a multiple of 3 */  #define EBUFLEN 128  #define BUFLEN 1024  int main()  {  pcre  *re;  const char *error;  int  erroffset;  int  ovector[OVECCOUNT];  int  rc, i;  char  src [] = &amp;ldquo;111 &lt;!-- raw HTML omitted -->Hello World&lt;!-- raw HTML omitted --> 222&amp;rdquo;;   // 要被用来匹配的字符串  char  pattern [] = &amp;ldquo;&lt;!-- raw HTML omitted -->(.*)&amp;lt;/(tit)le&amp;gt;&amp;quot;;              // 将要被编译的字符串形式的正则表达式  printf(&amp;ldquo;String : %s/n&amp;rdquo;, src);  printf(&amp;ldquo;Pattern: /&amp;quot;%s/&amp;quot;/n&amp;rdquo;, pattern);  re = pcre_compile(pattern,       // pattern, 输入参数，将要被编译的字符串形式的正则表达式  0,            // options, 输入参数，用来指定编译时的一些选项  &amp;amp;error,       // errptr, 输出参数，用来输出错误信息  &amp;amp;erroffset,   // erroffset, 输出参数，pattern中出错位置的偏移量  NULL);        // tableptr, 输入参数，用来指定字符表，一般情况用NULL  // 返回值：被编译好的正则表达式的pcre内部表示结构  if (re == NULL) {                 //如果编译失败，返回错误信息  printf(&amp;ldquo;PCRE compilation failed at offset %d: %s/n&amp;rdquo;, erroffset, error);  return 1;  }  rc = pcre_exec(re,            // code, 输入参数，用pcre_compile编译好的正则表达结构的指针  NULL,          // extra, 输入参数，用来向pcre_exec传一些额外的数据信息的结构的指针  src,           // subject, 输入参数，要被用来匹配的字符串  strlen(src),  // length, 输入参数， 要被用来匹配的字符串的指针  0,             // startoffset, 输入参数，用来指定subject从什么位置开始被匹配的偏移量  0,             // options, 输入参数， 用来指定匹配过程中的一些选项  ovector,       // ovector, 输出参数，用来返回匹配位置偏移量的数组  OVECCOUNT);    // ovecsize, 输入参数， 用来返回匹配位置偏移量的数组的最大大小  // 返回值：匹配成功返回非负数，没有匹配返回负数  if (rc &amp;lt; 0) {                     //如果没有匹配，返回错误信息  if (rc == PCRE_ERROR_NOMATCH) printf(&amp;ldquo;Sorry, no match &amp;hellip;/n&amp;rdquo;);  else printf(&amp;ldquo;Matching error %d/n&amp;rdquo;, rc);  pcre_free(re);  return 1;  }  printf(&amp;quot;/nOK, has matched &amp;hellip;/n/n&amp;rdquo;);   //没有出错，已经匹配  for (i = 0; i &amp;lt; rc; i++) {             //分别取出捕获分组 $0整个正则公式 $1第一个()  char *substring_start = src + ovector[2*i];  int substring_length = ovector[2*i+1] - ovector[2*i];  printf(&amp;quot;$%2d: %.*s/n&amp;quot;, i, substring_length, substring_start);  }  pcre_free(re);                     // 编译正则表达式re 释放内存  return 0;  }  程序来自网上，看到有人不理解最后一个for循环的含义，ovector返回的是匹配字符串的偏移，包括起始偏移和结束偏移，所以就有循环内部的2*i处理。&lt;/p>
- /posts/pcre_use/ - This is a customized copyright.</description></item><item><title>[zz]外媒：证明ARM是错的 要为英特尔“平反”</title><link>/posts/zz_foreign_media_arm_is_wrong_to_prove_intel_quotrehabilitatedquot/</link><pubDate>Tue, 12 Mar 2013 05:03:00 +0000</pubDate><guid>/posts/zz_foreign_media_arm_is_wrong_to_prove_intel_quotrehabilitatedquot/</guid><description>seteuid0's blog /posts/zz_foreign_media_arm_is_wrong_to_prove_intel_quotrehabilitatedquot/ -&lt;p>外媒：证明ARM是错的 要为英特尔“平反”ugmbbc发布于 2013-03-12 07:55:43|7175 次阅读 稿源:腾讯数码       随着ARM架构处理器在移动市场的崛起，英特尔所坚持的x86架构似乎被认为是错的，一直以来也有不少人坚持这样的观点，Seeking Alpha作者Ashraf Eassa近日却撰文表示，ARM是错的，ARM在PC领域和服务器领域会很快消亡，而英特尔则将在平板和手机领域获得更多的份额，以下是原文：我 欣赏ARM公司如今的成绩和产品，但是我对其首席执行官近年来宣称“ARM指令集架构在能效方面，相对于竞争对手英特尔的芯片具有天然架构优势”的夸大言 论表示质疑。一直以来，我在《Seeking Alpha》上都表达了这样的观点：指令集因素对于功耗的影响是可以忽略不计的，微处理器架构（真正的处理器设计）才是决定“每瓦性能比”指标的关键。在 这篇文章中，我将向大家展示来自学术机构的一些研究成果，这些研究证实了我的观点。同时，我还将就其长远意义进行更加深入的分析。先从这段我采访ARM首席执行官的摘录写起：“英特尔必然会赢得一些智能手机设计。我们将英特尔视为非常重要的竞争对手。它们能否成为能效方面的领导者？不，当然不会。”这一观点已被解读成一个观念，即英特尔X86指令集存在一些固有的能效问题。这导致许多非技术人员发表了被误导了的言论，认为英特尔应该“获取ARM授权许可”并“构建ARM芯片。”这是一个明显荒谬的观念，而更多明智的人则一再指出：所有这些只是微架构设计的目标。从历史上看，英特尔一直将更高性能设计作为目标。显然，这将导致更大的功耗。此外，由于性能/功耗比曲线是非线性的，这些因素会让人们会误以为：ARM能够以更低的功耗升级至英特尔的性能水平。微架构vs.指令集广义的“ARM芯片”的概念正被误读。“ARM芯片”有两种类型：·通用内核：对于那些没有资源和意愿来开发其自有处理器的公司，ARM提供了完整的CPU内核设计。从性能/功耗比的角度来看，这些内核通常都相当不错，这也是它们被广泛采用的原因。·定制内核：希望针对特定负载而提供差异化能力的公司，会采用定制CPU内核。ARM自有的CPU内核对大部分智能手机/平板电脑来说足够高效和强大。然而，诸如苹果和 高通这样的企业认为，有必要在内核设计方面走自己的路，因此每家公司的内核设计都有各自不同的性能/功耗特性。如果能效单纯是指令集带来的，那么高通和苹 果就没有必要做这项工作——这分明就是浪费钱。我的主张是：实际的芯片设计，再加上制造这个芯片所采用的晶体管技术，才是性能/功耗比的决定因素。简 单地说，“ARM指令集”是用来实现软件兼容性的。因此，一款苹果ARM内核能够运行与高通ARM内核相同的代码。当然，指令集还定义了其他一些事情，例 如内存如何寻址、哪些指令需要被执行、有多少寄存器可用。但实际上，大多数的指令集（X86、POWER、ARM、MIPS）都是非常出色的。研究结果证明了这一点由威斯康辛大学的几名研究人员撰写的，并在IEEE高性能计算机架构国际研讨会上发表的研究报告，得出了以下结论，澄清了业界对ARM/X86的不实传言：·性能的差异是由微架构的差异所导致的，与ISA（指令集架构）无关。·能耗同样与ISA无关。·ISA差异会对技术实现方法产生影响，但是现代微架构技术已经让这些影响不具备实际意义；从根本上说，不存在某个ISA更加高效。·ARM和X86的具体实现仅仅是为不同性能水平进行优化的设计点而已。尽管技术领域的许多人一直持有这样正确的观点，但是投资界则基本上都被蒙在鼓里。那么，这些研究结果意味着什么呢？ARM在服务器领域将很快消亡ARM服务器设计的一大“卖点”，就是被“神话”的强于英特尔的能效。但是，ARM指令集架构在该领域并无优势，而英特尔通过调整精化其下一代微架构，将达到传统ARM的功耗水平。但与ARM竭力吹捧的指令集架构优势不同，英特尔具备以下实际的优势：· 在服务器厂商当中的口碑：英特尔目前拥有服务器市场，并已反复证明它能够生产可靠、快速、高效的解决方案。构建服务器来支持网站关键节点的人们，将会非常 犹豫转向使用像ARM这样的“小家伙”作为服务器的核心。具有讽刺意味的是，不断痛失服务器市场份额的AMD公司，可能是仅有的一家在服务器领域口碑不错 的微服务器厂商，因为它在服务器芯片业务方面有十多年的经验。·全球最先进的晶体管技术：从根本上讲，处理器取决于晶体管。在给定功率的芯 片中内置的晶体管数量越多、每个晶体管消耗的功率越少，你就能让芯片变得更快、更好和更便宜。当其他芯片厂还在苦苦挣扎于28纳米 HKMG（高K金属栅极）的时候，英特尔已经进入22纳米制程，即第一代三栅极，同时也是其第三代高K金属栅极制程。今年即将推出的基于该制程技术的全新 凌动处理器，将会把Applied Micro的40纳米制程的“X-Gene”以及其它32纳米/28纳米制程设计的芯片打得片甲不留。随着英特尔在2014年切入14 纳米，竞争对手的日子会更难过。AMD同样处于劣势。·长期积累的微架构经验：英特尔5年前推出的凌动内核，已被证明足以有效抗衡ARM Cortex A9、高通最新卓越的“Krait”以及苹果耀眼的“Swift”。在32纳米制程方面，英特尔古老的内核在能效上与最好的32纳米/28纳米ARM设计 相比，非常具有竞争力。你能否想象在英特尔今年过渡至全新微架构，并将在制程技术方面领先1到2代（22nm + FinFET）的状况下，将会发生什么？这甚至不能被称为竞争。英特尔不仅拥有主场优势，还极有可能具备能够以比竞争对手成本更低的方式构 建用于服务器的卓越芯片，这将封死ARM服务器厂商进入的大门。哦，我还忘了提及另一个优势：英特尔具有自己的晶圆厂(可保留晶圆代工厂的利润在自己手 里)，而其它所有公司都必须向台积电/GloFo/联电/三星付费，这使得英特尔拥有显著的成本结构优势。ARM在传统PC领域将很快消亡这一研究报告对于提高性能方面得出以下观点：高性能处理器相较于低性能处理器需要更多的功耗，这与指令集架构或是能效无关。它们遵循公认的功耗/性能相互制约的魔方。这 就是为什么无论何时有人一说英特尔的“内核”产品“能效不高”，我就失望摇头的原因。性能的增加和能耗不是线性增加的关系。你不能简单地将一个低功耗 ARM或凌动处理器的性能和能耗乘以数倍，然后就声称这样的处理器的内核将比目前更强大的处理器的内核更高效。人们的确试图在一个芯片或系统上坚持内置任 意数量的内核，然后宣称目前“大”内核设计的处理器是不必要的。但这是有条件的，即软件执行必须高度并行在任意数量的小内核上，而丝毫不考虑软件中单线程 执行的性能。对于大部分工作负载而言，这是一个非常大的常识性假设错误。在PC领域，英特尔拥有“数十年经验”这一优势，再加上非常明显的制程技术领先优势，以及长期沉淀的软件基础，任何ARM厂商都绝无可能在传统Windows PC领域玩得转，除非安卓或Chrome操作系统取得显著进展，才有可能与英特尔和AMD在同场竞争。英特尔将在平板电脑/手机领域获得市场份额世界上最流行的操作系统——谷歌的安卓——完全与指令集无关，英特尔正在积极地与那些仅编写ARM原生代码的软件开发者合作，以便进行重新编译。有趣的是，我曾经花几周时间使用基于英特尔处理器的摩托罗拉Razr i手机，发现任何在其上运行的应用程序都不存在兼容性问题。在 平板电脑和变形设备设计方面，英特尔在Windows 8领域只与AMD竞争，并与Nvidia、高通、三星及其它亚洲系统芯片（SoC）厂商竞争安卓市场份额（所有这些平台都基于ARM）。我并不知道英特尔 在这块市场可以取得多少市场份额，但是它将拥有一个强大的产品，使其至少在这块市场中分得不小的一杯羹。在手机领域，我注意到一些能够提供 顶尖调制解调器的公司数量正不断减少。高通、英特尔和博通将是该领域的主要厂商，未来一两年，英特尔将伴随其在LTE领域所取得的进展而赢得美国市场的设 计订单。英特尔缺席美国市场与X86/ARM并没有多大关系，而完全是因为LTE。是否曾注意到高通是如何进入每个在美国市场销售的手机的？完全是由于调 制解调器。X86/ARM是一个争议点，如果英特尔设计基于ARM的芯片，那么它将在这个领域颗粒无收。结论没 错，ARM的股价正呈上升趋势；是的，它现在占据平板电脑/智能手机市场的绝大多数份额，平板电脑/智能手机被称为“由兼容ARM的系统芯片（SoC）驱 动的设备”，但是由此贬损英特尔的实力是荒诞可笑的。有人曾告诉我，英特尔必须与整个ARM生态系统竞争。但事实并非如此，英特尔是在与ARM生态系统内 部的公司进行竞争，而这些公司之间同样存在类似的竞争……虽然可能还需要一些时间，但是未来对英特尔更加利好：来源：seekingalpha&lt;/p>
- /posts/zz_foreign_media_arm_is_wrong_to_prove_intel_quotrehabilitatedquot/ - This is a customized copyright.</description></item><item><title>[zz]如果想保持神秘的话 请不要轻易在社交网站上点“赞”哦</title><link>/posts/zz_if_you_want_to_maintain_the_mystery_then_please_do_not_easily_spot_on_the_social_networking_site_quotlikequot_oh/</link><pubDate>Tue, 12 Mar 2013 04:46:00 +0000</pubDate><guid>/posts/zz_if_you_want_to_maintain_the_mystery_then_please_do_not_easily_spot_on_the_social_networking_site_quotlikequot_oh/</guid><description>seteuid0's blog /posts/zz_if_you_want_to_maintain_the_mystery_then_please_do_not_easily_spot_on_the_social_networking_site_quotlikequot_oh/ -&lt;p>如果想保持神秘的话 请不要轻易在社交网站上点“赞”哦ugmbbc发布于 2013-03-12 10:54:06|2707 次阅读 稿源:生物360       感谢生物博士僧的投递“如果想保持神秘的话，请不要轻易在社交网站上点’赞‘哦。”一项研究证明了多种个人特征——诸如政治或宗教观、性别、种族和性倾向——可以通过一个人在脸谱网（Facebook）上的“赞”（Like）记录加以预测。研究人员开发了一个数学模型从而根据58000位美国脸谱网用户的“赞赏”记录预测一个人的特征和偏好。研究人员使用来自这些志愿者的脸谱网档案的人口统计信息和通过网上调查测试衡量的智力、人格和对生活满意度等其他特征训练了这个模型。这个模型准确地预测了研究参与者的性别、种族出身和性倾向，在93%的情况下正确地识别出了男性和女性、在95%的情况下正确地识别出了非洲裔美国人和白人，并且在88%的情况下正确识别出了同性恋和异性恋。该模型还在超过80%的情况下正确地对民主党人和共和党人、基督教徒和穆斯林加以分类，但是该模型 在预测关系状态、药物滥用以及父母的关系状态方面的准确度较低。研究进一步发现这个模型几乎与预测一位用户对经历的开放程度的小型人格测试一样准确。研究人员表示，这些发现可能对于改善许多产品和服务的供给有用，但是也可能对于个人隐私有负面的影响。&lt;/p>
- /posts/zz_if_you_want_to_maintain_the_mystery_then_please_do_not_easily_spot_on_the_social_networking_site_quotlikequot_oh/ - This is a customized copyright.</description></item><item><title>[zz]黑帽欧洲2013会议：10个有趣的安全简报</title><link>/posts/zz_black_hat_europe_2013_conference_10_interesting_security_briefing/</link><pubDate>Tue, 12 Mar 2013 04:45:00 +0000</pubDate><guid>/posts/zz_black_hat_europe_2013_conference_10_interesting_security_briefing/</guid><description>seteuid0's blog /posts/zz_black_hat_europe_2013_conference_10_interesting_security_briefing/ -&lt;p>黑帽欧洲2013会议：10个有趣的安全简报raymon725发布于 2013-03-12 11:13:15|739 次阅读 稿源:linuxeden       还有什么比一群黑客在本周蹲在阿姆斯特丹召开 黑帽欧洲 2013 会议更让人关注的呢？我们不敢猜测，但正面的消息是他们为我们准备了一份礼物 —— 关于 10 个有趣的安全简报。与会者将讨论如何 Android 和 Windows 8 的漏洞，并提供与会者关于如何保护这些和其他平台的建议。下面是这 12 个简报的内容：*超越犯罪攻击:时间攻击: 一对Imperva理工学院的研究人员将引入定时信息泄漏(时间)攻击,简化了犯罪攻击,可以用来虐待SSL/TLS数据压缩HTTP会话劫持。利用HTTP请求,时间攻击追求HTTP响应。别担心,这些家伙还在讨论时间攻击的缓解措施。[ QUIZ: Black Hat&amp;rsquo;s most notorious incidents ]*保护医疗设备: 来自 InGuardians 的杰伊·拉德克利夫的主题是解决医疗设备安全的粘性和恐怖。他说,这个话题是很混乱的，主要是理清思路。这样的设备分为三类，并从不同安全角度上进行讨论。*云存储服务与您的防火墙——没有比赛: CRSgroup的杰克·威廉姆斯将揭示如何存储同步服务,如Dropbox,通常安装在流氓时尚企业网络上,创建一个数据丢失保护的挑战以及对恶意软件的方式渗透到组织。*移动设备保护器有多安全?: 研究者从Vulnex分享发现来自智能手机、平板电脑和笔记本电脑的一些威胁安装的程序，如 GPS 跟踪器和远程数据删除。*一个公路交通噩梦的考虑: 类似谷歌导航和Waze工具可以帮助司机在驾车中避免迷路，但如果黑客侵入这些系统并决定每个人都头朝同一个方向，又该如何？汉堡科技大学博士生Jeske Tobias将为你解释这个过程。*连电器都不安全:设备安全: 你的网络、电子邮件可能会有一些硬件或者软件的防火墙，但是电器如何呢？来自 NCC 集团的本•威廉姆斯为你讲解。*视频会议系统: 安全顾问莫里茨Jodeit 演示了宝利通视频会议系统的 H.323 中半双工的高端通过漏洞——以及如何使用 rootkit 进行监测。*一个真的蜜罐: 诺基亚研究员将描述一个积极的概念,一个蜜罐不只是诱惑和陷阱入侵者,还提供持续攻击从而控制系统。*应用程序沙箱安全: 研究人员在这个简报将解释缺乏沙盒标准可能使这些所谓的安全系统不太安全。*Dock 怎么了?: NCC集团的安迪·戴维斯说,灵活性使得笔记本电脑变得脆弱性可攻击, 他支持通过检测受损 Dock 设备来降低风险。[via pcadvisor]&lt;/p>
- /posts/zz_black_hat_europe_2013_conference_10_interesting_security_briefing/ - This is a customized copyright.</description></item><item><title>[zz]Chrome、Firefox、IE 10、Java、Win 8 在Pwn2Own上全部沦陷</title><link>/posts/zz_chrome_firefox_ie_10_java_win_8_at_pwn2own_all_fall/</link><pubDate>Sun, 10 Mar 2013 02:41:00 +0000</pubDate><guid>/posts/zz_chrome_firefox_ie_10_java_win_8_at_pwn2own_all_fall/</guid><description>seteuid0's blog /posts/zz_chrome_firefox_ie_10_java_win_8_at_pwn2own_all_fall/ -&lt;p>Chrome、Firefox、IE 10、Java、Win 8 在Pwn2Own上全部沦陷ugmbbc发布于 2013-03-08 17:48:58|11286 次阅读 稿源:solidot       在惠普赞助的年度黑客挑战赛Pwn2Own上，Chrome、Firefox和IE 10浏览器，Java和Win 8相继沦陷。其中，法国安全公司Vupen Security的 研究人员组合利用多种攻击技术（包括两个IE10 0day漏洞），绕过了微软的多重安全防线，入侵了运行在Surface Pro（Win8）平板上的IE10浏览器，从而赢得了10万美元奖金。MWR Labs的两位安全研究人员利用了Chrome 25中未发现的漏洞和一个内核权限提升漏洞入侵了运行在Windows 7上的 Chrome浏览器，同样获得了10万美元奖金。苹果的浏览器 Safari尚未沦陷。成功演示攻击的安全研究人员不会对外披露细节，他们将会通知微软、Mozilla、Google和Oracle，而攻击代码只会保留在挑战赛组织者手中。&lt;/p>
- /posts/zz_chrome_firefox_ie_10_java_win_8_at_pwn2own_all_fall/ - This is a customized copyright.</description></item><item><title>[zz][多图]科技圈最具权势25大女工程师</title><link>/posts/zz_multi_top_25_most_powerful_technology_circles_female_engineers/</link><pubDate>Sat, 09 Mar 2013 08:06:00 +0000</pubDate><guid>/posts/zz_multi_top_25_most_powerful_technology_circles_female_engineers/</guid><description>seteuid0's blog /posts/zz_multi_top_25_most_powerful_technology_circles_female_engineers/ -&lt;p>[多图]科技圈最具权势25大女工程师study875发布于 2013-03-08 07:36:56|3279 次阅读 稿源:腾讯科技       北京时间3月8日消息，美国科技博客BusinessInsider近日撰文称，在科技领域，女性工程师可谓凤毛麟角，这和产业属性以及就业潜规则不无关系。但是，近几年来，在引领风骚的美国科技领域，出现了许多名声鹊起、德高望重的女性工程师。Business Insider汇总整理了25位在科技领域最具影响力的女性工程师名单，雅虎CEO梅耶尔、Facebook的工程主管乔思林•高德费恩等悉数登榜。以下是Business Insider全文：有人说，当身怀六甲的玛丽莎•梅耶尔（Marissa Meyer）接过雅虎帅印之时正是暗喻男女不平等的“玻璃天花板（glass ceiling）”现象终结之日（译者按：glass ceiling是个很老的概念，通常指在某类个体在组织中，提升到一定阶段之后会再也无法提升的现象，比如女性在公司组织中普遍的遭遇）。从梅耶尔赴任雅虎那天起，全球的科技产业似乎已经开启了一个崭新的时代。但是事实却并非如此乐观——当前的女性工程师依然稀缺，特别是软件类开发工程师。比如说在科技领域走在最前沿的美国，有个数字就可以提供最强有力的佐证——2010-11学年，全美获得计算机科学学位的学员中女性的比例只有12%。但是，同样是在美国，那里也有很多旨在鼓励女性进入科技领域并在那里大展宏图的机构和项目，比如说女性编程员研究所（Ladycoders seminars）和Anita Borg女性和技术研究所（Anita Borg Institute，简称ABI），后者日前刚颁发了新一界的“年度女性洞察力奖”（Women of Vision Awards），获奖者是在机器人项目以及儿科领域颇有建树的（玛雅•玛大利）Maja Matarić。当时光的年轮转到今天，对于选择科技生涯的女性们而言，她们的前途是不可限量的。如今她们将会有大把的机会成为一家大公司或者前景无限的创业型公司里的女强人。1.人物：吉纳维夫•贝尔（Genevieve Bell）头衔：英特尔实验室互动与体验研究院主管吉纳维夫•贝尔其实是一个人类学家，她加入英特尔主要是为了帮助公司开发更易于用户接受的芯片级产品。两年前，在公司的要求下，吉纳维夫一手打造了一个新的研发团队，这也是英特尔能够PC芯片级上游始终走在最前端的重要原因之一。同时，吉纳维夫同时也是知名科技类书刊《预测一个数字化的未来：普适计算的困境和神话》（Divining a Digital Future: Mess and Mythology in Ubiquitous Computing）的作者，而且还是ABI“2013年度女性洞察力奖”（Women of Vision Awards）的获得者之一。2.人物：思林•高德费恩（Jocelyn Goldfein）头衔：Facebook的工程主管乔对于一家像Facebook这样的大网站而言，技术部的重要性首当其冲，而乔思林正是这个部门的领头人，她主要负责Facebook的产品设计和页面规划，比如说资讯Feed、搜索以及图片项目。高德费恩在科技领域的资历深厚。在加入Facebook之前，她在全球最大的虚拟化解决方案厂商Vmware任副总裁一职。和其他入榜的女性一样，她也是“帮助更多的女性进入科技工程领域”的倡导者之一。03.人物：玛丽莎•梅耶尔（Marissa Meyer）头衔：雅虎CEO作为雅虎的掌舵人，玛丽莎•梅耶尔不惧争议奋往直前，最终带领雅虎暂时摆脱困境。事实证明，精通技术的玛丽莎•梅耶尔绝对是科技领域当之无愧的女中豪杰。玛丽莎•梅耶尔的资历显赫。她是谷歌的第20个职员，也是谷歌的第一位女性职员。梅耶尔在谷歌发展壮大过程中起到了至关重要的作用，包括“谷歌搜索”、“图片”、“地图”、“书刊”、“资讯”以及“工具栏”等技术和产品，梅耶尔都居功至伟。与此同时，梅耶尔还是全球第一大连锁超市沃尔玛的董事会成员。4.人物：金伯•洛克哈特（Kimber Lockhart）头衔：云存储科技公司Box的技术总监作为技术总监，洛克哈特带领着她的团队，为Box的网页应用开发了大量的新产品和新功能。而在此之前，洛克哈特一直致力于自我创业，她其实也是云技术公司Increo Solutions的创始人。2009年，Box并购Increo Solutions，洛克哈特也随之加入Box。值得一提的是，Box并购Increo Solutions之前，身为Increo Solutions首席执行官的洛克哈特就开发过一款名为“Backboard”的协同服务技术。5.人物：玛雅•玛大利（Maja Matarić）头衔：在机器人项目以及儿科领域颇有建树的教授玛雅•玛大利是南加利福尼亚大学的一名教授，主要研究机器人项目，她的作品可以帮助到各种各样的人。在医学领域，她研发的机器人可以帮助治疗中风患者、自闭症儿童、肥胖儿童以及老年痴呆等。值得一提的是，玛雅也是“2013年度女性洞察力奖”获奖者之一。6.人物：戴安妮•格林（Diane Greene）头衔：天使投资人、VMware联合创始人戴安妮•格林是全球最具实力的虚拟化解决方案厂商VMware的联合创始人。2007年，在格林的带领下，VMware成功上市，2008年，功成名就的格林从VMware急流勇退。如今的格林在谷歌董事会拥有一席，而且她也是一名顾问和天使投资人，她投资的Nicira在去年被VMware以12.6亿美元的价格收购。7.人物：薇琪•汉森（Vicki Hanson）头衔：邓迪大学教授、IBM研究员薇琪•汉森是邓迪大学的一名教授，同时也是IBM研究院的一名名誉研究员。她致力于计算机运算和有特殊需求的人类之间的交汇领域相关的研究工作。一连串的奖项是对薇琪研究工作的最大肯定。常年来，她一直在帮助科技公司如何更好的进行开发产品和设计，不论是在软件编程领域还是在像触摸屏这样的高科技样机产品的设计领域，薇琪都有她独到之处。同时，薇琪也是“2013年度女性洞察力奖”的获奖者之一。8.人物：劳伦•斯塔斯（Lauren States）头衔：IBM云计算及公司发展规划部首席信息官劳伦•斯塔斯是IBM云计算策略的负责人，她的项目包括IBM在全球推出的战略理念——智慧星球。同时，她还负责公司的业务分析工作。斯塔斯算是IBM的元老了，早在上世纪90年代，她还是一名青色毕业生时便以初级系统编程人员的身份加入了IBM。时至今日，从行政助理到软件群组的技术员，斯塔斯可以说在IBM公司的每一个工作岗位都留下了自己的印记。值得一提的是，斯塔斯还在公司内部发起了一项专门负责内部人才培养的计划。她看上去是不是很脸熟呢？没错，她在IBM智慧星球的电视广告上露过脸。9.人物：玛丽安娜•特塞尔（Marianna Tessel）头衔：VMware工程部副总裁全球最具实力的虚拟化解决方案厂商VMware有个庞大的工程部，而特塞尔正是这个强大开发团队的带头人。她的团队成员有200多人组成，专门负责为全球2000多家客户解决技术相关的问题。值得一提的是，特塞尔还是多项专利的持有人。10.人物：珍•菲茨帕特里克（Jen Fitzpatrick）头衔：谷歌地理及本地化工程部副总裁菲茨帕特里克也是谷歌最早的员工之一。她1999年就加入了谷歌，当时的工作是负责谷歌搜索引擎搜索结果的优化工作。此外，她还负责用户界面开发，包括页面目录搜索服务、谷歌地图等项目。谷歌的geo-loco移动科技部门也已经正式转交给了她。值得一提的是，她的前任正是去年加盟雅虎的梅耶尔。11.人物：帕德玛西•华莱尔（Padmasree Warrior）头衔：思科首席技术官兼首席策略官帕德玛西•华莱尔于2007年加入Cisco，并于去年正式就任思科首席策略官一职，同时依然保留首席技术官职位。在华莱尔的科技职业生涯中，到目前为止她已经获得许多的奖项，其中的“世界科技女性名人堂（Women in Information Technology International Hall of Fame）”分量最重。作为一名成功的女性，华莱尔不忘其他艰苦奋斗中的女同胞。近几年来，她一直在帮助和指导创业中的女性朋友，比如说文胸电子商务平台True&amp;amp;Co的创始人（阿什•拉玛莫塞）Aarthi Ramamurthy就从华莱尔那里受益良多。12.人物：劳拉•马瑟（Laura Mather）头衔：安全软件开发商SilverTail首席策略官兼联合创始人全年，全球数据存储巨头EMC斥巨资收购了Silver Tail，同时也把在互联网安全领域首屈一指的专家劳拉•马瑟招致麾下。2008年，马瑟和其他几位友人共同创立了安全软件开发商SilverTail，她们开发的防诈骗系统被广泛用于银行系统和电子商务网站。同时，马瑟还是网络反钓鱼工作小组Operational Policy的总经理，这是一家非盈利机构，旨在应对那些基于电子邮件的安全威胁，比如说网络钓鱼、网域嫁接以及电子欺诈等。13.人物：鲁奇•桑维（Ruchi Sanghvi）头衔：网络存储在线应用Dropbox的运营主管和劳拉•马瑟一样，鲁奇•桑维（Ruchi Sanghvi）加入Dropbox也是因为后者收购了她的公司。今年2月份，Dropbox收购了桑维创办的Cove——一个致力于解决中小企业办公协作和交流的公司。桑维成为了Facebook的首位女员工，她主要负责给Facebook Platform以及Facebook Connect做产品规划工作。14.人物：安德里亚•博班克（Andrea Burbank）头衔：Pinterest的搜索及数据挖掘工程师去年，安德里亚•博班克从微软跳槽到了社交网站Pinterest。在此之前，她主要负责微软的搜索引擎必应的开发工作。在加盟微软之前，她供职于另一家搜索引擎公司Powerset——2008年被微软以1亿美元的价格收购。从经历上看，博班克可以说在搜索领域资历非常深厚。知名社交网站Pinterest不仅得到了大量女性用户好评，同时，Pinterest在业界也以“适合女性工程师成长和发展”而闻名。时至今日，Pinterest先后从苹果、Quora、谷歌、YouTube、必应以及LinkedIn等公司挖来了不少女性工程师。15.人物：瑟琳娜•托巴科瓦拉（Selina Tobaccowala）头衔：全球知名网络调查公司SurveyMonkey的高级副总裁瑟琳娜•托巴科瓦拉就职于知名网络调查公司SurveyMonkey，她是该公司工程开发团队的领军人物。她因创办Evite.com而声名鹊起。后来，Evite.com被娱乐票务和营销公司Ticketmaster巨额收购。16.人物：保拉•朗（Paula Long）头衔：数据收集技术开发商DataGravity首席执行官兼联合创始人保拉•朗现在是新创公司DataGravity（数据情报收集技术开发商）的CEO兼联合创始人，但是事实上，让朗的名号响彻业界的却是她与其他友人联合创办的iSCSI存储公司——EqualLogic——2007年被戴尔以14亿美元的价格并购。作为一家初创公司，DataGravity正在被业界所重视。上个月，DataGravity宣布已经在第二轮融资中获得了3000万美元的投资。如果算上去年4月获得的1200万美元投资，现在公司总共获得了4200万美元的风险投资。此外，朗还是在线存储服务商SugarSync的董事会成员，并为其他初创存储厂商担任顾问。17.人物：王忻（Niniane Wang）头衔：电子商务公司Minted首席技术官王忻目前负责领导Minted的工程团队。Minted是一家全球独立美术设计师社区，同时也是一家电子商务网站，印刷并销售他们最棒的设计，主要为纸质品，比如节日贺卡、结婚请柬、笔记本、日历。在加盟Minted之前，王忻在谷歌和微软的工程团队积累了11年的工作经验。她负责过的项目包括微软操作系统中的Desktop Search功能（王忻因此还获得了谷歌创始人奖）、Gmail邮件、Google Lively虚拟社区以及微软的Flight Simulator模拟飞行游戏。此外，王忻还持有33项个人专利。18.人物：玛丽•安•戴维森（Mary Ann Davidson）头衔：甲骨文首席安全官玛丽•安•戴维森在甲骨文出任首席安全官之要职，她的责任是确保甲骨文的产品不能存在任何大的安全漏洞。在甲骨文的各种安全科技巡展上，她多次在公众场合露面。她现在也是包括ISSA（Information Systems Security Association，信息安全系统协会)在内的多家集团和机构的董事会成员。近期，玛丽•安•戴维森正式入选ISSA名人堂。19.人物：雅什利•乌拉尔（Jayshree Ullal）头衔：Arista Networks的首席执行官Arista networks是一家为数据中心提供云计算网络设备的公司，公司首席执行官正是雅什利•乌拉尔。近几年来，通过提供更快的数据中心网络设备，Arista Networks已经和思科展开了激烈的竞争。乌拉尔曾今是思科的高级副总裁，当时主要负责公司的数据中心、交换机以及服务器群组，这些部门每年的营收达100多亿美元。20.人物：珍妮弗•查耶斯（Jennifer Chayes）头衔：微软新英格兰研究院（Microsoft Research New England）总经理珍妮弗•查耶斯是微软公司著名科学家，同时也是位于剑桥大学的微软新英格兰研究院联合创始人。在创立微软新英格兰研究院之前，查耶斯在微软雷德蒙德研究院的领导层担任要职。她曾今还是加利福尼亚大学数学系教授。她和其他学者合著了110多份科技论文，同时名下还有不少于25项专利技术。21.人物：希拉里•梅森（Hilary Mason）头衔：网址缩短服务商Bitly的首席科学家作为首席科学家，梅森主要从事实时互联网的研发和工程设计。梅森算是纽约科技界的明星人物了。她曾是非盈利组织HackNY的创始人之一，同时还是许多机构和组织的顾问，包括TechStars纽约创业孵化机构。梅森曾获“TechFellows工程领导才能”奖（TechFellows Engineering Leadership）。22.人物：戴安•布莱恩特（Diane Bryant）头衔：英特尔DCSG群组总监戴安•布莱恩特是英特尔的前首席信息官。去年，她领导的DCSG群组（Datacenter and Connected Systems Group，数据中心和连接系统群组）为英特尔贡献了100亿美元的营收。DCSG群组几乎涵盖了英特尔企业运算和云技术相关的所有业务。值得一提的是，安妮塔博格学院（Anita Borg Institute）日前给英特尔颁发了“2013年度Top Company for Technical Women”奖。23.人物：斯托米•彼得斯（Stormy Peters）头衔：火狐开发者部门主管斯托米•彼得斯可以说是火狐公司的关键人物之一，在她的领导下，火狐浏览器以及各种软件应用项目做得有声有色。她教会了惠普什么是真正的开源设计。而且她还在GNOME基金的运作过程中起到了至关重要的作用。GNOME是Linux操作系统的关键项目。彼得斯也是各种开源软件开发者研讨会的常客，她通常以顾问的身份出席。24.人物：伊冯•施耐德（Yvonne Schneider）头衔：美国运输公司全球商业服务技术部高级副总裁伊冯•施耐德是美国运输公司全球技术团队的领军人物。目前，施耐德的工作重心主要涉及企业支付、全球商务旅行业务以及HR人力资源等领域。她已经在科技领域摸爬滚打了25年之久，一开始是做能源工业相关领域。值得一提的是，施耐德还在Houston Food银行干过很长一段时间。25.人物：米纳克希•查特吉（Meenakshi Chatterjee）头衔：Twitter高级硬件工程师米纳克希•查特吉负责给Twitter构建规模庞大的数据中心，避免失败鲸（Fail Whale）图像再次出现在用户界面上（译者按：Fail Whale是一种图案，每次Twitter服务器出错出现宕机时，用户界面就会出现这个图片）。查特吉加盟Twitter的时间并不长，大约只有几个月。在此之前，她一直在惠普和3PAR（2010年被惠普以23.5亿美元的价格收购）任职，主要负责构建高端服务器以及存储系统。&lt;/p>
- /posts/zz_multi_top_25_most_powerful_technology_circles_female_engineers/ - This is a customized copyright.</description></item><item><title>[zz][多图+下载]隐藏在亚马逊导航菜单的武林秘籍</title><link>/posts/zz_multi-map__download_to_hide_the_navigation_menu_in_the_amazon_martial_arts_cheats/</link><pubDate>Sat, 09 Mar 2013 06:28:00 +0000</pubDate><guid>/posts/zz_multi-map__download_to_hide_the_navigation_menu_in_the_amazon_martial_arts_cheats/</guid><description>seteuid0's blog /posts/zz_multi-map__download_to_hide_the_navigation_menu_in_the_amazon_martial_arts_cheats/ -&lt;p>[多图+下载]隐藏在亚马逊导航菜单的武林秘籍LonelyJames发布于 2013-03-09 08:42:45|6509 次阅读 稿源:煎蛋       亚马逊给菜单加上了一个紫色三角形的缓冲地带.当鼠标移动到紫色三角的范围时,二级菜单并不会立马变化,而是有一定延迟.而当你直上直下地移动鼠标的时候,二级菜单则会很快变化,所以才会保证有如丝般顺滑的感觉.直接简单暴力的对比:亚马逊的悬停菜单.其他网站的悬停菜单.看出区别来没,亚马逊的悬停菜单可谓如丝般顺滑.而其他菜单却会有一定令人不爽的延迟.这当然不是因为电脑太慢,这种延迟设计是为了避免下面这样的尴尬…只是这个例子实在太棒了,我可一点没有黑bootstrap的意思哦!*所以亚马逊到底用了神马黑科技在菜单上?*亚马逊的秘密设计在于,他们给菜单加上了一个下图中紫色三角形的缓冲地带.当鼠标移动到紫色三角的范围时,二级菜单并不会立马变化,而是有一定延迟.而当你直上直下地移动鼠标的时候,二级菜单则会很快变化,所以才会保证有如丝般顺滑的感觉却不会出现上面那种尴尬呃情况.作为一个有理想有抱负的Geek,怎能无视这么Cooooooool的导航.我已经安全将其借鉴到新网站了,另外我对山寨亚马逊的行为可一点也不羞愧!&amp;ldquo;我敢肯定这秘籍早就被发现了,只是我们疑惑之解决之然而忘之,于是再惑之再解决之又则再相忘于江湖.(I’m sure this problem was solved years and years ago, forgotten, rediscovered, solved again, forgotten, rediscovered, solved again.)&amp;quot;(我是从日文站上看到的英语不是我很菜啊只有乱翻译了)by Ben Kamens任何人也想玩的可以下载这个JQuery-menu-aim 试试效果:D================================致那些和我一样看到这个就情不自禁打开淘宝找类似导航条却没找到的人们:京东天猫苏宁当当跟原版比起来真是有过之而无不及啊。&lt;/p>
- /posts/zz_multi-map__download_to_hide_the_navigation_menu_in_the_amazon_martial_arts_cheats/ - This is a customized copyright.</description></item><item><title>[zz]苹果10年工龄以上员工可享受“离岗留职”待遇</title><link>/posts/zz_apple39s_10_years_of_service_or_more_employees_can_enjoy_quotretention_undergoquot_treatment/</link><pubDate>Sat, 09 Mar 2013 06:25:00 +0000</pubDate><guid>/posts/zz_apple39s_10_years_of_service_or_more_employees_can_enjoy_quotretention_undergoquot_treatment/</guid><description>seteuid0's blog /posts/zz_apple39s_10_years_of_service_or_more_employees_can_enjoy_quotretention_undergoquot_treatment/ -&lt;p>苹果10年工龄以上员工可享受“离岗留职”待遇ugmbbc发布于 2013-03-09 09:42:14|3776 次阅读 稿源:腾讯科技       苹果人力资源的工作流程看上去充满奇趣。据科技博客作者约翰·格鲁伯（John Gruber）透露称，苹果的员工可以享受“离岗留职”的待遇，按照苹果的这一政策，员工可以离开公司、最长两年时间之后再重返公司，在这两年的时间内，这些离开的员工仍将在苹果公司保留职位。事实上，员工的确可以离开公司，而且如果他们在两年之内重返公司的话，两年的离职就像是从未发生过一样，员工重返公司的职位不会离职而受影响。不过，员工在离职的这段的时间内，将不会得到薪酬，但也不会丢失他们在苹果公司的岗位。不过，据格鲁伯透露，只有在苹果公司已经工作10年以上的员工才能享受上述待遇。当然，苹果的做法与一些公司大不相同。一些公司认为，那些离职的员工会对仍留下来的员工产生伤害，因为有员工离职的话，就将意味着留下来的员工将面临着更加繁重的任务。特别是，一些员工在离开后会加盟竞争对手公司，这样将会对原来的公司产生更大的伤害，而且在这样的公司，一旦这些员工离职，可能会被视为“叛徒”，而可能会不被其他未离职的员工所接纳。但是，苹果一直非常神秘，而且也非常独立，因此人们可能会质疑苹果可能也会采取与那些公司相似的政策——即根本不会再聘用那些已经离职的员工。不过，与这些猜疑相反的是，苹果会给离职的员工到其它地方尝试的机会，而且还不会损害苹果。格鲁伯称，苹果公司没有休假制度，因此，这种两年的离岗留职政策也有点类似于一种休假方式。当年，史蒂夫·乔布斯（Steve Jobs）重返苹果之后，取消了公司的休假制度。后来，许多员工都申请了两年的“休假”，之后再离职。因此，苹果宣称，员工在离开之后，如果想改变主意的话，那么还可以再回来。对此，格鲁伯认为，苹果的这种政策也非常明智，因为苹果面临的最大一个威胁就是人才的流失，然而，如果能够让离职的员工很容易地再重返公司，那么这种威胁就将减少很多。&lt;/p>
- /posts/zz_apple39s_10_years_of_service_or_more_employees_can_enjoy_quotretention_undergoquot_treatment/ - This is a customized copyright.</description></item><item><title>[zz]Google OS为年度黑客大赛Pwnium 3准备了$314.159万 但无人能拿走</title><link>/posts/zz_google_os_annual_hacker_contest_pwnium_3_prepare_the__3141590_but_no_one_can_take_away_as/</link><pubDate>Sat, 09 Mar 2013 06:17:00 +0000</pubDate><guid>/posts/zz_google_os_annual_hacker_contest_pwnium_3_prepare_the__3141590_but_no_one_can_take_away_as/</guid><description>seteuid0's blog /posts/zz_google_os_annual_hacker_contest_pwnium_3_prepare_the__3141590_but_no_one_can_take_away_as/ -&lt;p>Google OS为年度黑客大赛Pwnium 3准备了$314.159万 但无人能拿走study875发布于 2013-03-09 10:54:00|1020 次阅读 稿源:cnBeta.COM       在本周温哥华召开的Pwnium 3竞赛大会上Google拿出了314.159万美元作为奖金，让那些开发者找寻Chrome OS的漏洞，但是Google最终宣布目前并未有开发者能够拿到完整的奖金，但是会对目前提供的相关漏洞进行评估然后支付相关的奖金。在今年的Pwnium 3竞赛上Google则将焦点集中在Chrome OS系统，相比较往年奖金上升了很多，往年最高奖金为6万美元，而今年直接提升至了314.159万，而且这个数字是圆周率，所以更具意义。&lt;/p>
- /posts/zz_google_os_annual_hacker_contest_pwnium_3_prepare_the__3141590_but_no_one_can_take_away_as/ - This is a customized copyright.</description></item><item><title>[zz]Google Play也不安全 10款应用就有一款携带恶意程序</title><link>/posts/zz_google_play_is_not_safe_to_carry_10_applications_have_a_malicious_program/</link><pubDate>Sat, 09 Mar 2013 06:16:00 +0000</pubDate><guid>/posts/zz_google_play_is_not_safe_to_carry_10_applications_have_a_malicious_program/</guid><description>seteuid0's blog /posts/zz_google_play_is_not_safe_to_carry_10_applications_have_a_malicious_program/ -&lt;p>Google Play也不安全 10款应用就有一款携带恶意程序study875发布于 2013-03-09 11:16:44|616 次阅读 稿源:cnBeta.COM       随着Android在全球移动平台的风生水起俨然成为了恶意程序下手的目标，根据趋势科技通过旗下的移动应用程序信誉服务对超过200万的应用进行调查统计发现在10款从Google Play上下载的Android应用中就有1款应用携带恶意程序，在2013年Android手机遭受恶意程序工具的次数将突破100万起。对200万款应用进行分析之后趋势科技发现了293091款应用都携带各种恶意程序，甚至其中有150203款应用携带的恶意程序属于“高危”级别，还有443294款应用会链接到各种收费平台上。在这293091款应用中其中有68740款应用直接是从Google Play上下载下来的，目前Play拥有约70万的应用程序，相当于每10个应用程序就有一个是携带恶意程序的应用。&lt;/p>
- /posts/zz_google_play_is_not_safe_to_carry_10_applications_have_a_malicious_program/ - This is a customized copyright.</description></item></channel></rss>