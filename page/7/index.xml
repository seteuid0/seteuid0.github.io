<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>seteuid0's blog</title><link>/</link><description>Recent content on seteuid0's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This is a customized copyright.</copyright><lastBuildDate>Sun, 18 Apr 2021 11:16:32 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>[zz]负载和性能测试的工具汇总</title><link>/posts/zz_load_and_performance_testing_tools_summary/</link><pubDate>Fri, 18 Oct 2013 05:32:00 +0000</pubDate><guid>/posts/zz_load_and_performance_testing_tools_summary/</guid><description>seteuid0's blog /posts/zz_load_and_performance_testing_tools_summary/ -&lt;p>负载和性能测试的工具汇总时间:13-10-15 栏目:web测试, 测试 作者:admin, admin 评论:0 点击: 10 次本文标签： web测试Agileload - 敏捷负载SA测试所有类型的网络和移动应用的负载测试工具。主要功能包括自动记录测试场景，分布式的负载注射器，拓扑和阈值分析异常，基础设施监控，为每个用户配置文件中创建自定义的测试报告。也可在Amazon EC2上。对于Web服务， HTML / AJAX ， Web 2.0的，如Adobe的Flash / Flex中， J2EE ， 。NET ， PHP，大型门户网站， ERP / CRM门户网站，微软的Silverlight ，微软SharePoint 。 负载测试仪LITE - 自由/低成本的负载测试工具从Web性能股份有限公司 - 精简其负载测试仪PRO ™ 5软件版本。运行测试用例1,000,000虚拟用户没有从用户托管的服务器的成本，或从云服务器在每小时1美元。为了测试网站的性能，如原始带宽，防火墙和负载平衡器吞吐量，特别是单页面加载时间的基本方面。 LoadZen - 基于云计算负载测试服务从LoadZen ，使仿真数万数以千计的虚拟化的并发用户。其功能包括可变斜坡上升利率来改变测试的流量模式，随机虚拟用户的行为，定期测试，并更多。免费使用多达25个并发用户。 崇 - 免费开放源码的多协议分布式负载测试工具支持的流程之一。可以用来强调HTTP ， WebDAV的， SOAP和PostgreSQL ， MySQL和LDAP的Jabber / XMPP服务器。还支持SSL 。 OS监控（ CPU，内存和网络流量）使用远程服务器上的SNMP ，穆宁或二郎山剂。可以使用XML配置系统;几个会话，以模拟不同类型的用户。动态会话可以在XML描述。网友认为时间和到达率可以是随机的，使用的概率分布。在装载过程中，可以生成HTML报告，查看响应时间测量，服务器CPU ，等在Erlang开发。 Telerik测试的工作室 - Telerik测试的工作室附加的负载测试。负载测试可以利用现有的功能测试或Fiddler日志创建或可以从头捕获。设有一个单一的的VU许可证类型覆盖范围和极其强大的技术和协议能够产生极端增加硬件/系统要求高的用户负载，而不加载代理。 Loadster - 负载测试工具，测试网站， Web应用程序和HTTP web服务为导向，以从砖厂科技公司，包括图形脚本编辑器，现场报道，和无限的虚拟用户。同时执行多个脚本，多个虚拟用户群，坡道用户加载了上下几乎无限的可能性，模拟虚拟用户的网络带宽，调整或随机等待时间，并添加阈值微调测试输入。免费版本。 Loadtracer - Web负载测试工具，从跟踪技术列兵。公司包括录像机，模拟和分析仪。刻录机支持参数化，变量管理，响应验证;模拟器支持多达几千个虚拟用户，分析仪可以生成图表和报告可汇出成各种格式。 HttpRider - 一个轻量级的，开源的工具，网站负载，性能和压力测试。 NET开发的亚历博泰兹。创建HTTP场景分析HTTP请求使用提琴手和复制他们根据用户的配置。可以自定义它们绑定到自定义数据源模仿不相同请求的查询字符串和POST参数。需要Windows NET 4.0 。 LoadUI - 免费开源的负载测试工具从SmartBear软件。支付专业版增加了服务器监控，分发和结果比较。基于Java的，所以作品在多个平台上。工程命令行或UI 。 AppViewWeb - 基于云计算的性能测试服务从AppNeta ，提供Web应用程序的网络性能可视性。尤其适用于QA测试工程师进行广域网络上的应用程序预部署测试。测试基于Web的应用，客户关系管理（ CRM ） ，网络电话，视频，思杰， VMware和数据库管理应用程序时，它有助于理解到远程站点的最终用户的角度，从这些应用的性能; ， AppViewWeb提供了这样的见解。 沙尘暴 - 从动力科技公司的负载测试工具，支持Web ，移动和电子邮件协议。支持Flex和Ajax的协议，如HTTP，HTTPS ，Web服务， POP3 ， SMTP ， DNS ， SIP ， WAP ，小程序，和Java序列化的对象。丰富的可扩展的框架，使用JavaScript和Java核心API的测试案例运行时修改。最流行的网络，应用程序和数据库服务器的综合资源监控。 多 - 多机械化机械化是一个开源框架，由科里·戈德堡的Web性能和负载测试。它可以让你同时运行的Python脚本来生成对一个网站或Web服务的负载（合成纤维交易） 。结果可以保存为CSV格式，以及含有HTML报告的统计和图表。熟练使用Python ，HTTP和性能/负载测试，建议使用多成功机械化。 Load2Test - 性能/负载/压力/高可用性测试工具可以捕捉真实从Enteros公司的生产工作量播放模拟成千上万的用户在组件层自上而下的测试或后端测试。也可在亚马逊EC2 ， Rackspace公司或平台实验室的云环境。综合绩效管理和根源分析系统自动收集在负载测试基础设施的性能指标，适用于跨组件的相关识别性能劣化和瓶颈。有针对性的平台/操作系统：控制器Load2Test ：在Windows，Linux ; Load2Test的测试节点：Windows和Linux 。性能Load2Test显示器和根本原因分析数据采集器 - 操作系统： Windows，Linux和HP / UX ， SUN的Solaris ， IBM AIX数据库：甲骨文， DB2 ， SQL SERVER ， SYBASE， MySQL和PostgreSQL的应用程序： 。 NET时，JBoss的WebSphere ，WebLogic和， Oracle应用服务器（ OAS ）的GlassFish ， Tomcat中， JettyStorage ： NetApp文件管理器， IBM DS8300 Xceptance负载测试 - 负载测试和回归为Web和Java等应用程序的负载测试工具Xceptance软件技术公司。包括录音功能。 XLT云服务。 JUnit 4测试例测试实施。对于基于Web的测试框架提供了一个（无头）的浏览器，可以模拟Internet Explorer或Firefox行为。可以执行模拟网页浏览器的客户端JavaScript和方式，它简化了Web 2.0应用程序创建测试用例。独立于平台的工具，在Java中实现测试脚本， Java或Ruby 。免费为最多5个虚拟用户。 Blazemeter - 自助服务，按需，基于云计算的负载测试。模拟的webapps ，网站，移动应用程序或Web服务的任何用户场景。启动一个专用的服务器或群集100 。兼容的Apache JMeter的 - 预配置的JMeter的环境中，最多144个CPU内核和500 GB的内存。设置地理位置从选择worldwde 。设置测试，获得测试结果，查看检测报告，比较过去的测试报告，以及更多，一个统一的控制台上。使用一系列的Blazemeter专用负载服务器整合到你的专用网络，用于测试你的防火墙后面的VPN证书。免费工具和资源，技巧和窍门，以优化的网站和应用程序的性能。 负载情报 - 负担得起的“软件作为服务”云智能负载测试。软件和无限的硬件都包括在内。 JMeter的用户可以执行的测试脚本，一个无限的，预配置，分布式环境。设置，也没有安装都不是必需的。 JMeter的日志，报告，测试脚本， CSV文件和更多的直接访问。 LoadStorm - 一种基于Web的负载测试工具/服务作为一种分布式应用程序充分利用亚马逊Web服务扩展的处理能力和带宽的需求需要的力量。随着测试负载的增加至数百或上千的虚拟用户， LoadStorm自动添加机，从亚马逊的服务器场处理的处理。测试可以使用的工具，以这样一种方式来模拟不同的用户提供大量的独特的登录和不同的任务。 NeuStar公司的Web性能 - 按需自助服务，收费为您服务由NeuStar公司能够击中一个网站真正的浏览器的大量的模拟。利用硒。使用基于云计算的真实或模拟的浏览器， AJAX和Flash的支持。浏览器的屏幕截图包含在报告中的错误。 负载影响 - 在线负载测试服务从Gatorhole / loadimpact.com的负载和压力测试您的网站在互联网上访问我们的分布式网络负载生成节点 - 服务器集群具有非常快的连接，使数以万计的模拟用户同时访问您的网站。 1-50模拟用户更高层次的水平低负荷测试有月租费。 Pylot - 克里戈德堡产生http的并发负载的开源工具。在一个XML文件中定义测试案例 - 指定请求 - URL ，方法，身体/有效载荷，等等 - 和验证。验证是通过正则表达式匹配的内容，HTTP状态代码。 HTTP和HTTPS （SSL）支持。监视和执行GUI （ wxPython的）的测试套件，并调整负荷，代理商的数量，请求的时间间隔，斜坡上升时间，测试时间。显示实时的统计和错误报告。 从最终用户的角度来看， APPLOADER - 负载测试应用程序来自NRG全球的Web和其他应用程序，从Windows桌面访问;生成负载。协议无关，并且支持多种企业级应用。与其Chroniker监控套件集成，使负载测试结果可以与系统行为的负荷增加。从赢平台上运行。 fwptt波格丹达米安 - 开源工具为负载测试Web应用。主要功能包括：处理Ajax的。在C＃中生成测试。对于Windows平台 JCrawler - 一个开放源码的Web应用程序的压力测试工具，包括爬行/探索性的特点。用户可以给JCrawler一组起始网址，它会从该点起，开始爬行经历的任何URL ，它可以找到它的方式和Web应用程序的负载。负载参数（次/秒）通过中央XML文件进行配置;火灾为多个线程需要保持恒定的负载，包括自我测试单元测试。处理HTTP重定向和饼干，独立于平台的。 vPerformer - 性能和负载测试工具从Verisium公司评估的Web应用程序的性能和可伸缩性。使用使用Javascript录制的脚本或定制的脚本。有针对性的平台：Windows 卷曲装载机 - 开源工具编写的&amp;rsquo;C'，模拟应用负载和数以千万HTTP / HTTPS和FTP / FTPS客户端，每个与它自己的源IP地址的行为。对比卷曲装载机使用真正的C编写的客户端协议栈，即HTTP和FTP协议栈libcurl和TLS / SSL的OpenSSL其他工具。每个虚拟客户端的活动记录和收集的统计信息：解析，建立连接，发送请求，接收响应，头和数据接收/发送，从网络上的错误， TLS / SSL和应用级事件（HTTP，FTP ）错误。 戈麦斯网络负载测试 - 按需负载测试服务从Gomez.com /康博。利用戈麦斯的活跃网络提供按需主动监控从150 +运行在世界一流的企业级服务器，高带宽的数据中心在全球各地，和戈麦斯的主动最后一哩的需求主动监测150,000 +真正的，消费者提供级台式机，在168多个国家和地区。 StressTester - 企业Web应用程序的负载和性能测试的工具，从反光解决方案有限公司高级用户出行建模，可扩展的负载，系统资源监视器和结果分析。无需脚本。适用于任何网络， JMS ， IP或SQL应用。独立于操作系统。 磨床 - 自由BSD风格的开源许可下提供一个基于Java的压力测试框架。协调活动的许多进程在多台机器一个测试脚本，使用图形控制台应用程序。测试脚本利用客户端代码体现在Java插件。大多数用户都不会写自己的插件，而不是使用所提供的插件之一。配备了成熟的插件测试HTTP服务，以及作为一个工具，可以自动记录HTTP脚本。 代理嗅探器 - 从大卫·菲舍尔公司INGENIEURBÜRO能力的Web负载压力测试工具包括： HTTP / S的Web会话记录仪可用于任何Web浏览器，然后，可以使用录音自动创建优化的基于Java的负载测试方案;自动保护“假阳性”的结果，通过考察实际网页内容，详细的错误分析使用保存的错误快照的实时统计数据。 测试主 - 从Novosoft负载测试工具，功能包括IP欺骗，同时多个测试用例和测试网站功能的网站的动态内容和安全的HTTPS页面。 在线JKool - 基于Web的J2EE和SOA应用程序性能测量和监测服务从Nastel公司开始和停止在需要时实时数据监测演练JMS，JDBC方法调用， servlet和会话简单的一次点击选项现场查看会话的详细信息;内置了JBOSS， WebLogic和IBM WebSphere应用服务器的支持。 Funkload - 免费的Web负载测试，压力测试和功能测试工具用Python编写的由Benoit册数和分发的免费软件，在GNU GPL下。模拟一个Web浏览器（单线程）使用webunit ; HTTPS支持;产生详细的报告休息，HTML或PDF 。 雪崩 - 的负载测试设备从思博伦通信设计进行压力测试安全，网络， Web应用程序的基础设施产生大量的用户和网络流量。模拟模拟多个Web浏览器，同时连接多达两百万用户提供唯一的IP地址，支持SSL ， HTTP 1.0/1.1， FTP ， RTSP / RTP ， MS赢传媒， SMTP ， POP3 ， DNS ，远程登录，支持Web服务测试，和视频需求超过组播协议。 Loadea - 压力测试工具，在WinXP上运行两个虚拟用户的免费评估版本。捕获模块提供了一个开发环境，采用C＃脚本和基于XML的数据。控制模块定义，日程安排和部署测试，定义的虚拟用户数，结果分析等分析模块，并提供报告功能。 LoadManager - 从Alvicom负载，压力，稳定性和性能测试工具。 Eclipse和Java支持的所有平台上运行。 的QEngine性能测试 - 从公司Zoho的Web应用程序和Web服务的性能测试（负载测试和压力测试）的自动化测试工具; J2EE ， NET ， PHP ， AJAX ， Ruby on Rails的， SOAP Web服务等，支持多种浏览器在Linux和Windows 。 NeoLoad是 - 负载测试工具，网络和移动应用程序，从Neotys清晰和直观的图形界面，没有脚本/快速的学习曲线（ Javascript的最先进的情况下） 。可以设计复杂的方案来处理现实世界中的应用。清晰和全面的报告和测试结果。支持最新的技术，包括AJAX ， FLEX ， GWT ， Java序列化，以及更多。从私人实验室和从云的负载测试。与移动应用程序的兼容性。多平台的。 的LoadUIWeb Pro - 自动化的Web负载测试工具从SmartBear软件。生成本地负载或从云。记录场景和优化负荷模型，用写意的工作量建模工具。收集服务器的性能数据纳入报告。 QTEST - Web负载测试工具从Quotium Technologies SA公司。功能包括：饼干本身管理，使脚本建模阶段较短; HTML和XML解析器，允许从一个HTML页面或XML流量在测试脚本中的任何元素显示和检索;使用提供的API开发定制显示器的选项，更多。 测试透视负载测试 - 不要自己动手Keynote Systems公司的Web应用程序的负载测试服务。利用主题的负载产生的基础设施在互联网上进行现实的外部防火墙的负载和压力测试，以验证整个Web应用程序基础设施的性能。 飞行员软件有限公司SiteTester1 - 负载测试工具允许定义的请求，工作，程序和测试，的兼容HTTP1.0/1.1请求， POST / GET方法，饼干，运行在多线程或单线程模式，生成各种报表HTML格式保存和读取XML格式文件测试定义和试验日志。需要JDK1.2或更高。 httperf的 - Web服务器性能/基准工具，从惠普研究实验室。产生各种HTTP的工作量和测量服务器性能提供了一个灵活的设施。重点不是放在执行一个特定的基准，但提供了一个强大的，高性能的，可扩展的工具。免费提供源代码。 WAPT - Web负载压力测试工具从SoftLogica LLC 。处理动态内容和HTTPS / SSL使用方便;支持重定向和代理各类明确的报告和图表。 的Visual Studio专业测试工具 - 测试工具套件的Web应用程序和服务都集成到Microsoft Visual Studio环境。这些使作者测试仪，执行，管理测试及相关工作项目在Visual Studio中。包括实验室管理能力。 OpenLoad - 经济实惠，完全基于网络的负载测试工具从OpenDemand ;脚本语言知识不要求 - 基于Web的录音机可以捕获和翻译用户任何操作，从任何网站或网络应用。产生多达1000个并发用户以最小的硬件。 的Apache JMeter的 - Java桌面应用程序从Apache软件基金会，旨在进行负载测试功能行为和衡量绩效。最初设计用于测试Web应用程序，但已经扩展到其他测试功能，可以用来测试性能无论在静态和动态资源（文件， Servlets和Perl脚本， Java对象，数据库和查询， FTP服务器及以上） 。可以用来模拟了一个重负载的服务器，网络或对象，以测试其强度或分析不同类型的负载下的整体性能，在大并发负载性能或测试服务器/脚本/对象的行为可以使图形分析。 攻城 - 开源应力/回归测试和基准测试工具，支持基本身份验证，饼干， HTTP和HTTPS协议。允许测试模拟并发用户数量与配置一个Web服务器。指定数量的模拟用户或应力多个URL的同时，强调一个单一的URL 。报告交易总数，经过时间，传输的字节数，响应时间，事务处理速率，并发，服务器响应。仿照部分林肯·斯坦torture.pl后，由杰弗里·富尔默，开发，但同时强调许多URL 。分布式GPL条款下，用C语言编写;对于UNIX和相关平台。 JBlitz - 负载，性能和功能测试工具从氏族的制作。运行多个并行虚拟users.to的模拟沉重的负荷。验证每个响应使用纯文本或正则表达式搜索，或致电到自己定制的代码。完整的Java API 。对于测试和“防子弹的服务器端软件 - 平均价格， JSP页面的servlet ， EJB的，的Perl / PHP / C / C + + / CGI脚本等。 WebServer的压力测试工具 - Web压力测试工具从Paessler AG处理代理，密码，用户代理，饼干，AAL 。 网络测谎 - 缓存代理服务器，原始服务器加速器， L4 / 7交换机和其他网络中介免费提供的基准测试工具。其他特性：高性能的HTTP客户端和服务器，流量生成和内容模拟现实，准备使用的标准工作负载，强大的特定于域的配置语言，和便携式的开源实现。 C + +源;为Windows二进制无济于事。 OpenSTA - “打开系统测试架构&amp;rsquo;是一个自由，开放源码的Web负载/压力测试的应用程序，根据GNU GPL许可。采用了基于CORBA的分布式软件架构。 OpenSTA的二进制文件适用于Windows 。 PureLoad - 基于Java的跨平台性能测试和分析工具从PureLoad软件。含的Comparer &amp;lsquo;和&amp;rsquo;记录仪&amp;rsquo;的能力，动态输入数据，场景编辑器/调试器，负载生成单一或分布式的来源。 ApacheBench - Perl的API为Apache基准测试和回归测试。旨在为mod_perl的交易为基础的网站为一个完整的基准测试和回归测试套件的基础。对于压力测试服务器，同时验证正确的HTTP响应。基于的Apache 1.3.12 AB的代码。可通过CPAN 。tar.gz文件的。 酷刑 - 裸骨头的Perl脚本由Lincoln Stein测试Web服务器的速度和反应能力和测试特定的Web服务器的稳定性和可靠性。可以发送大量的随机数据到服务器以测量速度和响应时间的服务器，CGI脚本等 WebSpray - 低成本CAI网络的负载测试工具，包括链路测试能力，可以模拟多达1000个客户从一个单一的IP地址，同时还支持多个IP地址或无别名。对于Windows。 eValid负载测试 - Web测试工具，软件的研究，公司使用&amp;rsquo;测试功能的Web浏览器的测试引擎，提供基于浏览器的客户端100％质量检测，动态测试，内容验证，页面性能优化， Web服务器负载和容量分析。 加载Web性能测试 - 负载测试工具，强调易于使用，从Web性能公司支持所有的浏览器和Web服务器的记录，并允许浏览器和服务器之间的确切字节流观看，无需脚本。模拟调制解调器允许每个虚拟用户带宽有限。可以自动处理会话的具体项目，如饼干，用户名，密码， IP地址，和任何其他参数来模拟多个虚拟用户的变化。对于Windows ，Linux和Solaris ，大部分UNIX变体。 远舰质量工作室 - 从Technovations网站的性能测试的负载测试，捕获/回放，及相关工具的集合。模块包括WebCorder ，负载董事，报告生成，批量，经理和其他。 WebSizer负载测试模块支持认证， SSL ，饼干，重定向。录制的脚本可以手动修改。对于Windows。 预测 - 负载测试工具从Facilita软件的网页，客户端，服务器，网络和数据库系统。主要功能包括：专有的Java或C + +脚本窗口浏览器或网络录制/播放。支持二进制编码数据，如Adobe的Flex / AMF ， Serialised Java对象etc.SSL的支持NTLM ， Kerberos身份，代理，认证，重定向，证书，饼干，缓存，带宽限制和页面验证。虚拟用户数据可以参数化。兼容多种平台。 HTTP负载 - 负载测试应用程序从ACME实验室生成web服务器负载，从ACME软件。处理HTTP和HTTPS为Unix 。 的QALoad - 工具微焦点（原Compuware公司）负载/压力测试的网络，数据库和基于字符的系统。支持HTTP， SSL ， SOAP ， XML ，流媒体。工程与各种数据库，中间件， ERP 。 IBM的Rational Performance Tester - 性能测试工具从IBM /理性;塞贝尔应用程序和SAP解决方案的可选扩展。支持Windows， Linux和z / OS的分布式控制器代理商提供高层次的测试和详细的意见。 SILKPERFORMER - 微焦点（原Borland公司，原Segue公司）的企业级负载测试工具。可以模拟成千上万用户的工作与多个协议和计算环境。在部署前，无论规模和复杂性，允许电子商务环境的行为的预测。 RadView公司的WebLOAD - RadView公司软件的负载测试工具。主要功能包括：超过75性能指标，可以查看全球或个人虚拟客户端级别的交易成功/失败的详细交代，协助捕获间歇性错误;允许运行测试与以往的测试指标比较。通过可视化工具或Javascript的测试脚本。向导用于非GUI为基础的服务测试的自动化; DOS安全测试。 LoadRunner - 惠普公司（原水星的）网络和其他应用程序的负载/压力测试工具，支持多种应用环境，平台和数据库。大套房网络/应用程序/服务器显示器，使每一层/服务器/组件性能测量和跟踪的瓶颈。&lt;/p>
- /posts/zz_load_and_performance_testing_tools_summary/ - This is a customized copyright.</description></item><item><title>【zz】linux内核e820来源及相关知识</title><link>/posts/zz_linux_kernel_sources_and_relevant_knowledge_e820/</link><pubDate>Wed, 16 Oct 2013 16:57:00 +0000</pubDate><guid>/posts/zz_linux_kernel_sources_and_relevant_knowledge_e820/</guid><description>seteuid0's blog /posts/zz_linux_kernel_sources_and_relevant_knowledge_e820/ -&lt;p>&lt;a href="http://hi.baidu.com/ballmillsap/item/c2f3cf6f43d3220aa1cf0fe4e820">http://hi.baidu.com/ballmillsap/item/c2f3cf6f43d3220aa1cf0fe4e820&lt;/a>简介操作系统内存布局中断 int 0x15e820简介 收藏本文系转载，原文地址：http://wangcong.org/blog/?p=320，其中附录部分 为本人所加&amp;hellip;    e820是和BIOS的一个中断相关的，具体说是int 0x15。之所以叫e820是因为在用这个中断时ax必须是0xe820。这个中断的作用是得到系统的内存布局。因为系统内存会有很多段，每段的类型属性 也不一样，所以这个查询是“迭代式”的，每次求得一个段。    我们看内核源代码。主要涉及两个文件：arch/x86/boot/memory.c和arch/x86/kernel /e820_32.c。我们 已经很幸运了，这部分代码已经用C重写过了。你可能会奇怪，启动调用e820时我们还在实模式，怎么能用C呢？答案是，这里用的是16位的C。gcc早已 经支持.code16 gcc模式了。    看detect_memory_e820()函数，里面就是e820的本质。它把int 0x15放到一个do-while循环里，每次得到的一个内存段放到struct e820entry里，而struct e820entry的结构正是e820返回结果的结构！而像其它启动时获得的结果一样，最终都会被放到boot_params里，e820被放到了 boot_params.e820_map。如果你对struct e820entry还有疑问，你可以看一下arch/x86/kernel/e820_32.c::print_memory_map()，看看里面是怎 么使用它的。    当然了，在arch/x86/boot/memory.c里，你还会看到另外两个利用int 0x15查询内存的函数，不过用途不一样了。附：boot_params 结构体定义，其中E820MAX 定义为128:struct e820entry {__u64 addr;    /* start of memory segment */__u64 size;    /* size of memory segment */__u32 type;    /* type of memory segment */} __attribute__((packed));struct boot_params {    struct screen_info screen_info;         /* 0x000 */    struct apm_bios_info apm_bios_info;     /* 0x040 */    __u8  _pad2[12];                /* 0x054 */    struct ist_info ist_info;           /* 0x060 */    __u8  _pad3[16];                /* 0x070 */    __u8  hd0_info[16]; /* obsolete! */     /* 0x080 */    __u8  hd1_info[16]; /* obsolete! */     /* 0x090 */    struct sys_desc_table sys_desc_table;       /* 0x0a0 */    __u8  _pad4[144];               /* 0x0b0 */    struct edid_info edid_info;         /* 0x140 */    struct efi_info efi_info;           /* 0x1c0 */    __u32 alt_mem_k;                /* 0x1e0 */    __u32 scratch;      /* Scratch field! */    /* 0x1e4 */    __u8  e820_entries;             /* 0x1e8 */    __u8  eddbuf_entries;               /* 0x1e9 */    __u8  edd_mbr_sig_buf_entries;          /* 0x1ea */    __u8  _pad6[6];                 /* 0x1eb */    struct setup_header hdr;    /* setup header */  /* 0x1f1 */    __u8  _pad7[0x290-0x1f1-sizeof(struct setup_header)];    __u32 edd_mbr_sig_buffer[EDD_MBR_SIG_MAX];  /* 0x290 */    struct e820entry e820_map[E820MAX];     /* 0x2d0 */    __u8  _pad8[48];                /* 0xcd0 */    struct edd_info eddbuf[EDDMAXNR];       /* 0xd00 */    __u8  _pad9[276];               /* 0xeec */} __attribute__((packed));通 过bios获取系统内存布局代码如下：static int detect_memory_e820(void){    int count = 0;    u32 next = 0;    u32 size, id;    u8 err;    struct e820entry *desc = boot_params.e820_map;    do {        size = sizeof(struct e820entry);        /* Important: %edx is clobbered by some BIOSes,           so it must be either used for the error output           or explicitly marked clobbered. */        asm(&amp;ldquo;int $0x15; setc %0&amp;rdquo;            : &amp;ldquo;=d&amp;rdquo; (err), &amp;ldquo;+b&amp;rdquo; (next), &amp;ldquo;=a&amp;rdquo; (id), &amp;ldquo;+c&amp;rdquo; (size),              &amp;ldquo;=m&amp;rdquo; (*desc)            : &amp;ldquo;D&amp;rdquo; (desc), &amp;ldquo;d&amp;rdquo; (SMAP), &amp;ldquo;a&amp;rdquo; (0xe820));        /* BIOSes which terminate the chain with CF = 1 as opposed           to %ebx = 0 don&amp;rsquo;t always report the SMAP signature on           the final, failing, probe. */        if (err)            break;        /* Some BIOSes stop returning SMAP in the middle of           the search loop.  We don&amp;rsquo;t know exactly how the BIOS           screwed up the map at that point, we might have a           partial map, the full map, or complete garbage, so           just return failure. */        if (id != SMAP) {            count = 0;            break;        }        count++;        desc++;    } while (next &amp;amp;&amp;amp; count &amp;lt; E820MAX);    return boot_params.e820_entries = count;}这个函数执行完毕后，boot_params.e820_map 就含有了系统内存布局图。函数关键部分解释如下：07 获取启动参数boot_params里的e820_map数 组首地址。15-18 通过中断0x15调用bios例程获得一个内存段的信息，这条语句是按照AT&amp;amp;T的汇编语法格式写的，具体语法可以查看相关资料。当然了，在arch/x86/boot/memory.c里，你还会看到另外两个利用int 0×15查询内存的函数，不过用途不一样了。凡是弄过操作系统启动这块的，肯定都有这么一个感慨：我的东西该往哪里放啊！怎么个放法啊！恩，或许Linux这种方式值得我们借鉴，它的虽然很科学，但也很复杂。那有啥办法呢，BIOS这块本来就已经很乱了！&lt;/p>
- /posts/zz_linux_kernel_sources_and_relevant_knowledge_e820/ - This is a customized copyright.</description></item><item><title>selinux客体类实验分析</title><link>/posts/experimental_analysis_selinux_object_class/</link><pubDate>Wed, 16 Oct 2013 09:45:00 +0000</pubDate><guid>/posts/experimental_analysis_selinux_object_class/</guid><description>seteuid0's blog /posts/experimental_analysis_selinux_object_class/ -&lt;p>内核从2.6.33开始实现对策略的dynamic class/perm discovery,修改了内核中客体类的存放方式，使得class indices不再关联实际值。即策略中的客体类的位置可以随意写。RHEL6系列的内核将该功能下移，在RHEL6.0正式版本的内核中便有该功能（beta版本中没有）。实验：采用dummy策略添加新的客体类使用notebook的security_compute_av_example用例，对自己新加的客体类进行测试。修改notebook.conf文件，添加user_u:base_r:base_t测试一如果采用标准2.6.32.25内核，可以添加新的客体类。但是在如dummy策略中，添加的客体类位置不能影响默认的内核客体类，如必须替代里面用户空间的客体类，或者再最后面添加。自己给里面添加了20个，运行正常。如果覆盖了默认内核客体类的位置,load_policy时提示策略加载失败。Class 1 is incorrect ,found class1 but should be security如果采用新内核，则可以在任意位置添加客体类，系统及策略均运行正常。等有空的时候再研究下策略加载，理解里面class在内核的存放以及使用方式才能真正理解该patch的作用。Perm获取最后通过discover_class通过读取/class/*/index,以及/class/*/perms/下面的内容来获取客体类及权限相关的内容里面涉及到比较多的调用通过实验如果是一个新的，通过策略添加的用户空间的客体类和权限，那么在测试的时候，数据是使用策略中的数据，而不是头文件中定义的数据。所以应该是通过接口文件从策略里面读取出来的。相关的2个patch如下&lt;/p>
- /posts/experimental_analysis_selinux_object_class/ - This is a customized copyright.</description></item><item><title>[zz]Why Sailfish is better as a modern OS? Here is a comparison</title><link>/posts/zzwhy_sailfish_is_better_as_a_modern_os_here_is_a_comparison/</link><pubDate>Sat, 12 Oct 2013 09:59:00 +0000</pubDate><guid>/posts/zzwhy_sailfish_is_better_as_a_modern_os_here_is_a_comparison/</guid><description>seteuid0's blog /posts/zzwhy_sailfish_is_better_as_a_modern_os_here_is_a_comparison/ -&lt;p>Why Sailfish is better as a modern OS? Here is a comparisonAhoy sailors!Ever since Sailfish is known to us as an operating system not an actual “fish”, there were a lot of demos on YouTube; many people were literally amazed by the work of Finnish, some went: “This’ll be a failure like MeeGo-Harmattan” Which in fact wasn’t a failure and you’ll only know when you own a Nokia N9/50!On one hand the truth is, that “if” MeeGo-Harmattan had a fair bit of support, none of this would have happened to it and we didn’t know what’s Jolla and Sailfish at the moment, on the other hand; if Nokia had supported Harmattan and we were satisfied enough, we probably were spending our time playing with Windows Phone UI as we were convinced that MeeGo is dead, and were using an old school back button! So thankfully, Nokia sort of gave away an unwanted opportunity for the creation of Sailfish!So anyhow, Sailfish was born quite a while ago and we say it’s the most unique and practical yet beautiful operating system ever made for a smartphone. Yes it’s quite an ambition to say that in front of iOS, Android and quite amazingly WindowsPhone fans, I say quite amazingly because I recently found some real so called “fan-boys” around WP! But to be honest, I like ambition, because I always have reasons for my ambitiousness.While we’re still on topic, I want to say that gesture based operating systems are catching up lately and even the old ones are bringing gesture based updates such as iOS, even Android applications like the new Viber, or Hangouts or even Facebook (Beta) are involved in the gesture war and quite frankly, it started with WebOS from Palm but defined cleanly by Harmattan on the Nokia N9.So, back to the ambition, today we’re going to compare Sailfish to as many operating systems as we can starting with the main rivals which has roughly the same age as Sailfish.Sailfish OS vs. Ubuntu touch Ubuntu touch vs Sailfish (Done by Ali Fakhruddin)  Sailfish over Ubuntu:More user friendly UIMore lightweight than Ubuntu on slower devicesMuch more applications available before launchMore simple to useTrue multitaskingUbuntu over SailfishSome individuals like the complex of the UIIn some design queues it’s more modern looking than othersIn many ways, it’s more organizedIt’s more known to Linux enthusiasts due to its name Ubuntu Touch is a newly born mobile OS from Ubuntu which is entirely based on pure Linux and has a very eve-catching and beautiful user experience and interface but, there’s a but! Whilst Ubuntu is very beautiful and gorgeous, it reminds me of Android in terms of heaviness.Forgive me to say this, but nowadays it’s a bad habit for manufacturers and also the people using smartphones to be obsessed with the number of cores, the power of their processors and things like this when their software (Android in particular) has lack of lightness, as people with sense of humor call it “Lagdroid” on these days! So from the demos that I saw, Ubuntu was running on a fairly powerful Galaxy Nexus with a 1.2 GHz Dual-core processor and a PowerVR-540 graphical processor which is powerful enough to run Android quite smoothly, and Ubuntu was a bit laggy during some gestures.Well everyone might say Ubuntu is still in early stage but I have to say although everyone is right, we must remember that Sailfish was some day in its early stage as well and it was always running on a 3 year old N950 before the Jolla phone was shown to the public and it was fairly smooth in terms of UI.I don’t want to sound boring because this is a relatively long article but there are more to it. While the colors and shape of icons and the overall design of Ubuntu touch is very dramatic and great, there are things like practicality and comfort which have been sacrificed during the design. If you hold a big phone like Galaxy nexus or an even bigger Galaxy S4 in your hands, you wouldn’t not want to move the phone in your hand in order to reach the thing you desire to touch while you’re walking or even sitting around working with your phone! This impracticalness is all over Ubuntu’s home screen. Like Android, you have to reach the top if you want the notification center to pop down or maybe fiddle with some settings. Another gesture issue is that swiping from the left does NOT do the same thing as swiping from the right. While having more abilities with gestures is very good, it has its own drawbacks and down sides which as I said before, they sacrifice the practicality of the phone, if you are a left hander, swiping from the left is obviously easier for you and doing that in Ubuntu is getting into the application drawer or home. But if you are a right hander and you are used to work with your phone with your right hand, you have to reach the left side of the phone with your right hand which is honestly not so comfortable or easy on big-screened phones, in order to get the app drawer in sight.This video is a great example of some slight lags and using all the edges for different matters which makes the OS less practical for people with smaller hands, or people who don’t want to use their phone with two hands all the time. (Source: Engadget.com) On Sailfish thou, the story is rather different. The user is able to hold his finger in just the middle of the screen as the OS is so much focused on the comfort of the usage and the UX. As you can see in the demo below the presenter’s thumb is hardly moving to any place on the screen other than using those simple left to right or up to down gestures and the haptic feedback with sound, leaves the user so confident that there’s no need to look at the screen. Application-wise I have to say it’s a win for Sailfish again, since Ubuntu is a new platform (As is Sailfish) there are not much apps written for it except HTML5 apps while Sailfish has over 787185 apps only from Android (I know many of them are fart simulators or useless apps since the percentage of low quality apps are a whopping 22%, but since numbers matter in this section…) and as we have seen, the interest around the Sailfish SDK is quite high since there was an application ported to Sailfish only 20 minutes after the beta SDK was released. Tablet-wise, Ubuntu wins, but only in terms of beauty! Because it looks magnificent on tabs while Sailfish, due to its unique design is better for smaller devices such as phones. Yet I have to say it’s easier to work on a tablet with Sailfish since you don’t need to move your hand a lot in that big screen. Wrap up the first battle:I am not actually going to wrap this up and conclude it for our viewers because there might be some points that I have forgot to mention, so I’ll leave the Ubuntu Touch vs. Sailfish OS conclusion to you readers, please leave your opinion in the comment section. The Second battle goes to Firefox OS vs. Sailfish OSFirefox vs Sailfish (By Ali Fakhruddin)To my eyes, Firefox is still not good enough. Yes it does support HTML 5 apps but so does Sailfish and Ubuntu and Tizen and many other mobile operating systems! The UI, is honestly pretty basic and it’s sort of an old fashioned UI which is frankly more than 6 years old since the iPhone was introduced! Isn’t it? It doesn’t support any gestures and it does look like a downgraded budget iOS to replace Symbian in Asia!To be very frank, I digged a lot about the Firefox OS and honestly I couldn’t find anything interesting about it because if I want an OS for budget devices, there are already many OSes available like Bada from Samsung or the S40 OS from Nokia.So is there any logical reason here to compare FFOS to Sailfish really?Okay here is a video of the developer version of Firefox OS for your own decision.  The third battle goes to Tizen vs. SailfishTizen and sailfish are basically relatives from the beginning but they seem like very different and they have gone different ways.Tizen vs. Sailfish (By Ali Fakhruddin)Sailfish over Tizen:More modern, gesture based UIMuch, much smoother with a normal hardwareHas more apps due to the Android compatibility layerI personally still think it’s more open than TizenNo buttons needed to run the OSIt doesn’t lag like Tizen does! (It is really laggy at least now at this stage of development!) Tizen over Sailfish:Two very big companies (Samsung and Intel) are behind itIt has more history which says it’s basically older and more time is spent on its developmentIt’s been a long time that Samsung has taken over the MeeGo project since Nokia has dropped it, and since then, it’s being developed by Samsung but what we have seen from it, other that technical and professional stuff is some videos from a developer device from Samsung which looks relatively like a boxy Galaxy S3. The UI apparently is something similar to the TouchWiz that Samsung installs on their Android devices (Which I don’t think they yet realized it lags A LOT!) and the icons are Firefox OS lookalike. There’s a status bar like Android that you drag from the top of the screen as well. It is still a mystery! Are they going to use their TouchWiz in Tizen as well when they finish it? At least that’s what it shows everywhere.Till now, I don’t think Tizen has anything to win the battle at least at this very moment. Because despite the youngness of Sailfish, it looks more mature and indeed more innovative than Tizen in terms of Application compatibilities and user interface point of view. What’s underneath these OSes are also make them apart because yet again, Sailfish is more lightweight and less laggy on different hardware.Although in this video, CNET mentions that this is an early stage demo and many things might change about the home screen later on. The fourth battle: Sailfish vs. BB10BB10 and Sailfish are also relatives and very similar indeed. Both are Qt supportive, both are multitasking brothers, and both support some heavy gesture inputs.BB10 OS vs. Sailfish (By Ali Fakhruddin)Sailfish over BB10:More simple gesturesLess confusingMore organizedMore user customizableSlightly more innovative designInteractive multitaskingMore open than BB10BB10 apps can be easily ported to Sailfish BB10 over Sailfish:More focused on messagingBeing a bit older and having more native apps in comparisonThe best keyboard ever! (Not sure about Sailfish keyboard yet since we haven’t seen anything)It is very confusing comparing these two really, there are many similarities. Both have card based multitasking and the gestures are very similar. While there are many similarities, there’s another side which reveals the differences to our eyes.Gestures are different in BB10, they are confusing at first until the user gets used to them after using the phone for a while. The multitasking is wide and real but there’s no interaction with the app when it’s minimized, and that is getting quite old now.The app drawer looks iPhoney to me but the animations and transitions are pretty.But still the big problem with the gestures on BB10 is that they change their behavior in different situations, sometimes they are used for peaking, sometimes minimizing sometimes going back, and for a user that wants speed, it can get confusing at a time since there’s also no haptic feedbacks or sounds as well.So while the BB10 is very modern looking and fun to use, it’s not very practical in everyday use. I was before! But now that Sailfish has redefined the everyday practicality for mobile operating systems, not anymore…To conclude this competition between two very similar OS, I have to say that BB10 is a brilliant OS with a modern looking UI and a great user experience, but Sailfish wins again because it does everything that BB10 does, but it does them better! Different opinion? Please leave it in the comment section, so we can discuss. The fifth battle: back to the classic era!Sailfish vs. AndroidSpeaking of Android, there’s Google, one of the richest and most capable IT companies in the world behind it and well, that’s not exactly a weak point, is it?Android vs Sailfish (By Ali Fakhruddin)Let’s see… Sailfish over Android:Modern UI [with no lag!]True multitasking with no pause on the whilst minimizedMore user friendly and ease of usageHaving many of the Android apps available for it + Sailfish appsMore open and truly Linux [not only Linux based]Usage of simple gestures everywhereNo buttons needed to run the OSA LOT more lightweight Android over Sailfish:Many native apps already available for itMore customizable via custom ROMs [At the moment]Wise choice of hardware for it from different companiesMore known to the public In terms of the OS itself, since Sailfish is a new born OS and it’s here to compete; it has a package of awesomeness to compete! Android on the other hand is competing well and Google updates it once in a while with some cool features but the problem is that even they have tried a lot to change the behavior and the look of it in their various updates, it is still the same if you don’t consider the minor changes, so that is the actual reason of Sailfish being present at the moment.You see, Android’s base is a bit problematic and old fashioned and very difficult to change because it’s like changing the base of a building when you still want to keep the whole building intact.It’s complicated to convince android lovers about the fact that Android is quite old and mobile industry needs a big change [and no lag!].Android is the first generation touch OS style and it’s mostly based on tapping on visible contents but Sailfish is all about gestures and making the life easier by not moving your hand all over the screen. [This part was taken from Vesa-Matti Hartikainen speech in Akademy 2013, with some slight changes]There’s not much to say but if Android wants to win this competition, it needs a bigger change than the changes they are making to it now.So Sailfish is holding up quite well in terms of durability and performance in compare to Android.To conclude this one, I need to say that while Android is a very good OS with many unique facilities, in compare to Sailfish is not a very sophisticated OS to be honest because if you are an Android user, you’ll find the OS a little bit outdated after a while of using it, and I say that because I actually have an Android device as well. The RAM gets full easily and everything goes very slowly especially if you have your 3G or LTE connected continuously and that is not exactly an up-to-date experience. So in my personal point of view, Sailfish wins this one by a mile juts because it’s light and agile.As Antti Saarino, The chairman of Jolla says: “Future is not about hardware. It’s about software.”And that pretty much concludes my point saying Android has a weak software and manufacturers are trying to build a hardware to hide the weakness, but they have failed.The battle with the beginner of this gameiOS vs. Sailfish As you know, iOS was the innovation of mobile industry with its all new user interface which we’ve never seen ever, those animations and transitions were simply amazing when it first came out. After a while, the other operating systems started to be like it, which is not a bad thing and it doesn’t mean stealing but it means competing. It has been 7 years since the first iPhone OS was introduced that after a while they decided to name it iOS since it wasn’t only for iPhones anymore and this year, Apple finally decided to change the entire appearance of the OS, at least that’s what they said at first, so came the date of the introduction to the new iOS 7 with newly designed icons, new transition effects and new graphic designs with so many new features but it bugs you down when you see the home button is still present on Apple iPhones while the gestures are already in there as well.iOS vs. Sailfish (By Ali Fakhruddin)Let’s see what’s what! Sailfish over iOS:Fully gesture based with no home buttonFully open source, to allow the user do whatever they wantMore up-to-date and modern UITrue multitasking with no pausing the app in the backgroundiOS over Sailfish:More users at the momentBeing the starter of this gameVast amount of native apps available for itGreat support of Apple company behind itLots of developers are interested in developing apps for iOSOverall, iOS has lots of advantages in the mobile world and the most important one is the loyal customers, people who say Apple or nothing else. But iOS has lost its specialness and it isn’t as hot as before. Apple made an OS that was repeating its design for nearly 7 years and still looked fresh in many ways with some additions, but now it’s really time to move forward by not just making the icons look cartoony, but changing the whole story and language of the system! I know it’s very difficult to change everything and make the previous apps work flawlessly with the system but at some point there has to be a solution for this issue. Personally, I know many people who have their iPhones and when they saw Jolla, they made a pre order and they want to move forward already.iOS made benchmarks and was always the head of changes in the past while now it became a follower. it needs some big innovations that makes even the haters go WOW!WindowsPhone vs. SailfishThere is only one quite modern OS left in this comparison that I almost forgot to mention! It’s the OS that made itself a reason adorable in some ways which I’m going to explain.Let’s not make it boring to read! This OS made Nokia to dump their MeeGo and frankly kill it with a pistol! Yes, you must be guessing Windows Phone now! I admit, there are a lot of fan boys and even more haters around this OS nowadays and I give the right to all of them. Personally I both love and hate WP, you ask why?I love WP because if there wasn’t any WP around, there was no Jolla, no Sailfish and no more ambition in innovation as we see on Sailfish at the moment.I hate WP because it’s dull and boring and most importantly, it killed our beloved MeeGo Harmattan by its arrival. (I know! MeeGo isn’t dead blah blah blah, but you know what I mean!)Windows Phone vs Sailfish (By Ali Fakhruddin)So let’s see what this almost forgotten OS has to compete with?Sailfish over WP:Heavily gesture based UINor buttons for the back neither homeWider support of hardwareOpen sourceSimpler, better and more modern UITrue multitaskingEven before the launch it has more apps than WPMuch more unlimited SDK for developers to play withWP over Sailfish:What?I’m sorry but, is there any “better” thing that WP has and Sailfish doesn’t have? If you are going to say live tiles, I’ll have to stop you right there because Sailfish multitasking cards are live and being updated every time and they change their appearance time-wise. Can you fiddle with your live tiles on WP? No! They just show you stuff but on Sailfish, you can interact with your tiles (Cards) and fiddle with them however you want.Conclusion? Win for Sailfish! (Apologies to the offended Windows Phone fan!) I have to say, Sailfish made some decent battles with these bad boys and from where I’m sitting, it won all of it due to logical reasons I tried to write. I might have been a little bit harsh on some parts but it was fun!This article was written by a person who uses Android, iOS, MeeGo, Maemo and WP most likely at all time and I really mean it. I don’t want to set myself only on one side and while writing this I thought about every item I wrote and played with the devices available to me a lot to make sure nothing is missed, but if I missed anything, please let me know in the comment section.I hope you enjoyed reading it and you didn’t get bored because I admit it was too long! Let me know your opinions in the comment section if you’re still reading  And don’t forget to share the article with your friends if you liked it.Have a great weekend ahead. Sail on…Special thanks to Ali Fakhruddin for the image editing.Sepehr Noori (James)&lt;/p>
- /posts/zzwhy_sailfish_is_better_as_a_modern_os_here_is_a_comparison/ - This is a customized copyright.</description></item><item><title>[zz] linux常见发行版和kernel版本对应关系</title><link>/posts/zz_linux_kernel_version_releases_and_common_correspondence_between/</link><pubDate>Sat, 12 Oct 2013 04:43:00 +0000</pubDate><guid>/posts/zz_linux_kernel_version_releases_and_common_correspondence_between/</guid><description>seteuid0's blog /posts/zz_linux_kernel_version_releases_and_common_correspondence_between/ -&lt;p> linux常见发行版和kernel版本对应关系 2010-06-22 13:47:08分类： LINUXDebian 5.04 2.6.26Fedora 62.6.18Fedora 82.6.23Fedora 92.6.25Fedora 102.6.27Fedora 112.6.29Fedora 122.6.31mandriva 20102.6.31openSUSE 10.32.6.22suse 10.12.6.16suse 11.22.6.31redhat  Enter 4.32.6.9redhat 9.02.4.20redhat Enter 5.42.6.18ubuntu 8.042.6.24ubuntu 9.042.6.28ubuntu 9.102.6.31&lt;/p>
- /posts/zz_linux_kernel_version_releases_and_common_correspondence_between/ - This is a customized copyright.</description></item><item><title>[zz]bash脚本中出现[[:not found错误的解决方法--bash脚本总结</title><link>/posts/bash_script_summary_-_not_found_error_solution_zz_bash_script_appears/</link><pubDate>Thu, 10 Oct 2013 03:31:00 +0000</pubDate><guid>/posts/bash_script_summary_-_not_found_error_solution_zz_bash_script_appears/</guid><description>seteuid0's blog /posts/bash_script_summary_-_not_found_error_solution_zz_bash_script_appears/ -&lt;p>今天在写脚本的时候，发生了一个奇怪的问题：在脚本中使用[[的时候报错“[[: not found”。遇到问题自然是解决问题。1. 使用的bash版本太低？bash &amp;ndash;version查看bash版本信息如下lee@lee:~$bash &amp;ndash;versionGNU bash, version 3.2.39(1)-release (i486-pc-linux-gnu)Copyright (C) 2007 Free Software Foundation, Inc.在google bash手册，3.2.39已经不算低了，完全支持[[这样的扩展。看来不是版本问题。2.是脚本中[[使用错误？写测试脚本进行测试。test.sh测试脚本内容如下#!/bin/bash[[ 1 ]] &amp;amp;&amp;amp; echo &amp;ldquo;successful&amp;quot;执行后仍然是“[[: not found”。但是，在bash交互模式下执行[[ 1 ]] &amp;amp;&amp;amp; echo &amp;ldquo;successful&amp;quot;命令，却是成功的，执行结果如下lee@lee:~$ [[ 1 ]] &amp;amp;&amp;amp; echo &amp;ldquo;successful&amp;quot;successfullee@lee:~$看来bash是支持[[扩展的，那么，问题应该就是出在脚本上。3.脚本里的问题存在于哪里呢？显然，那条孤零零的命令是没问题的，因为已经在交互模式下验证过了。脚本里还有一行#!/bin/bash用来指定运行该脚本所使用的shell类型。显然，我们这里就是要使用bash，所以这一行也没有问题。4.既然脚本的内容没有问题了，那问题究竟在哪里呢？从编写和运行等几个环节仔细思考，脚本既然没问题，那问题是不是出在 运行环节上？出于习惯，我经常喜欢$ sh test.sh这样的运行脚本的 方式，那么，换一种运行方式是不是能解决问题呢？在终端下用./test.sh运行，果然，运行成功！至此，问题的症结找到。4.1下面的问题是，为什么sh test.sh与./test.sh有着不同的运行结果。通过查看(ls -l /bin)得知，sh只是一个符号链接，最终指向是一个叫做dash的程序lee@lee:~$ ls -hl /bin | grep sh-rwxr-xr-x 1 root root 686K 2008-05-13 02:33 bash-rwxr-xr-x 1 root root  79K 2009-03-09 21:03 dashlrwxrwxrwx 1 root root    4 2010-03-03 01:52 rbash -&amp;gt; bashlrwxrwxrwx 1 root root    4 2010-03-03 01:53 sh -&amp;gt; dashlrwxrwxrwx 1 root root    4 2010-03-03 01:53 sh.distrib -&amp;gt; bash 在运行sh test.sh时，首先调用sh命令，而sh指向dash，因此，sh test.sh相当于/bin/dash test.sh。而dash不管是名称还是程序大小，都与bash不同。那么，sh test.sh与./test.sh两种命令有了不同的执行结果也就不足为奇。在执行./test.sh命令时，bash会自动生成一个subshell来执行该命令，即执行filename arguments等 同于执行bash filename arguments。4.2还剩下的一个问题是，dash与bash究竟有什么区别？Ubuntu wiki上给出了答案。自Ubuntu 6.10以后，系统的默认shell /bin/sh被改成了dash。dash(the Debian Almquist&lt;/p>
- /posts/bash_script_summary_-_not_found_error_solution_zz_bash_script_appears/ - This is a customized copyright.</description></item><item><title>[zz]谷歌工程师再次公布Windows漏洞 并称微软很难合作</title><link>/posts/zz_google_engineer_saying_again_released_microsoft_windows_vulnerability_is_difficult_to_cooperate/</link><pubDate>Tue, 24 Sep 2013 14:44:00 +0000</pubDate><guid>/posts/zz_google_engineer_saying_again_released_microsoft_windows_vulnerability_is_difficult_to_cooperate/</guid><description>seteuid0's blog /posts/zz_google_engineer_saying_again_released_microsoft_windows_vulnerability_is_difficult_to_cooperate/ -&lt;p>谷歌工程师再次公布Windows漏洞 并称微软很难合作发表于2013-05-24 09:56| 20701次阅读| 来源CSDN| 86 条评论| 作者张勇微软GoogleWindows安全摘要：谷歌安全工程师Tavis Ormandy对外公布了一个Windows安全漏洞，微软已确认这个漏洞，对此微软同时称公开讨论漏洞的行为是不太负责任的，而Tavis Ormandy直言不讳的批评微软对待漏洞研究人员怀有敌意且难以合作。北京时间5月24日消息，谷歌安全工程师Tavis Ormandy指责微软对待外部研究人员怀有很大敌意不容易合作，大家看到这一句话可能莫名其妙，这是怎么回事，这还得从头看。几天前谷歌工程师公布了一个Windows漏洞，该漏洞可以让个人电脑崩溃或获得额外的访问权限。微软周三晚间时候确认了这个漏洞，微软发言人Dustin Childs在一封邮件里称，他们已经知道这一潜在问题可能会影响微软Windows系统的安全性，目前正在对这一反馈进行调查，他同时也表示，虽然还没有发现任何针对该漏洞的攻击，但微软会采取适当行动来保护他们的客户。除此之外Dustin Childs拒绝回答更多的问题，包括在5月17日漏洞被人全面披露之前微软是否已经意识到了这个漏洞的存在以及微软打算什么时候发布漏洞补丁。同时，微软和其他一些安全研究人员批评Tavis Ormandy在还没有发布补丁前就完全公开讨论漏洞的行为，因为这会将众多计算机用户置于危险之中，而负责任的做法则是私下向微软专家报告这一漏洞。披露Windows漏洞的过程：Tavis Ormandy称微软难合作谷歌安全工程师Tavis Ormandy披露了这个Bug，而且他讨论了Windows内核驱动“Win32k.sys”的缺陷，并且对外寻求帮助以克服当中的障碍。Tavis Ormandy称，他没有太多的空闲时间去解决微软这些代码的问题，所以他在寻找如何解决最后拦路虎的方法。因此，Tavis Ormandy于三月份首次在Github上公布了相关漏洞的信息，以获得帮助或吸引其他研究人员的调查。然而目前这一相关信息已从Github上消失。上周一Tavis Ormandy再次完全公开这个漏洞，包括说明更多细节和提供演示代码。Tavis Ormandy声称，他手里有一个漏洞会影响到微软当前支持的所有Windows版本，他称，这个代码可以提供给一些信誉良好学校的学生研究。周二，丹麦漏洞研究安全公司Secunia发表了一份框架咨询报告，声称它已证实了这个Bug，在打满全部补丁的Windows 7 Professional和Windows 8的系统中都会受到该漏洞的影响。Secunia称，该漏洞可能被用来产生拒绝服务（Dos）攻击或者给攻击者提升较高的权限。随后微软将这个称为Elevation of Privilege （EoP）特权提升漏洞。TripWire的安全营运总监Andrew Storms称，尽管这个漏洞不能被用作远程攻击，但它仍然应该被认为是比较严重的代码，因为它可以被偷偷用到一些被攻破的网站中去。他在一封邮件中指出，或许有些人认为需要许多不同的漏洞才能成功利用Windows或Windows应用程序的话，那么本地EOP特权提升漏洞则是攻破Windows系统中的关键一步。Tavis Ormandy在5月15日的博客上直言不讳的批评微软：如果有人能解决这个谜底并确定这是一个安全问题，请发送一封电子邮件过来，他会更新这个帖子，同时你如果确定这个漏洞可以被利用，你还可以把这个问题报告给微软，不过需要注意的是，微软对待漏洞研究人员常常怀有敌意，并且难以合作，因此他建议使用假名或匿名的邮件以保护自己。据悉，Tavis Ormandy此前公布了很多Windows漏洞，尤其是在2010年披露的一个漏洞，在他向微软报告这一漏洞五天之后，便对外公布了Windows XP中的某个漏洞，Tavis Ormandy称，这样的举动主要是因为这个漏洞的严重性，同时他也因为相信微软应该会在其他方面驳回他的分析。此外也是在2010年，Tavis Ormandy还发文指出Windows的虚拟ODS（VDM）中存在一个漏洞，这可以使黑客完全控制系统，而这一漏洞存在了17年之久。特别值得一提的是微软的漏洞不少都是谷歌发现的，尤其是今年2月份发布的57个安全更新，其中一半都是来自谷歌工程师的发现。另外Tavis Ormandy还向其他软件厂商曝光过漏洞，在2011年年中，他指责Adobe公司试图掩埋事实——在Flash Player中出现的超过400个Bug。TripWire的安全营运总监Andrew Storms此外还表示，即使可能会被一些精明的黑客利用，但微软可能并不会急于修补漏洞。在这一点上，我们不难想象：微软开始他们惯用的事件响应——开始确认错误，可能然后再发布一个公告。据悉，微软下一个补丁定期发布事件是6月11日，距今天不到三个星期。最后：在笔者看来，虽然不能否认谷歌工程师为Windows安全性所带来的积极作用，但不待安全补丁推出就直接公布相关漏洞或细节的行为确实不太负责任，纵然有些问题让个人不太确定这是否就是安全漏洞，但所产生的疑问最好且都应该和微软安全专家进行沟通后再有所动作……另外，或许微软确实对外部的漏洞研究人员态度不好、甚至不合作，但在尚未发布补丁之前就公开漏洞就等于将众多计算机用户置于危险之中，这样的举动合适吗？&lt;/p>
- /posts/zz_google_engineer_saying_again_released_microsoft_windows_vulnerability_is_difficult_to_cooperate/ - This is a customized copyright.</description></item><item><title>[zz]360捕获Windows漏洞第十次获微软致谢</title><link>/posts/zz_360_captured_for_microsoft_windows_vulnerability_tenth_thanks/</link><pubDate>Tue, 24 Sep 2013 14:43:00 +0000</pubDate><guid>/posts/zz_360_captured_for_microsoft_windows_vulnerability_tenth_thanks/</guid><description>seteuid0's blog /posts/zz_360_captured_for_microsoft_windows_vulnerability_tenth_thanks/ -&lt;p>360捕获Windows漏洞第十次获微软致谢2013年07月10日 10:25　来源：中国新闻网参与互动(2) 0中新网7月10日电  北京时间7月10日，微软发布月度安全更新共7款补丁，修复了Windows系统、Office和IE浏览器等软件中的34处漏洞。其中，由360互联网安全中心独家发现并通报微软的Windows内核高危漏洞 (CVE-2013-3173)也得到修复。迄今，360已十次报告漏洞而获得微软官方致谢，不仅遥遥领先于国内同行，在全球杀毒厂商中也排名前列。360安全专家石晓虹博士介绍说，Windows内核高危漏洞 (CVE-2013-3173)是由360工程师在日常安全研究中发现的。利用该漏洞，黑客可以通过邮件、文档等多种载体发起远程攻击，植入木马病毒。为了保护用户防范此漏洞攻击，360将漏洞技术分析提交给微软，协助对方及时推出补丁。微软本月补丁还修复了攻击代码已曝光月余的EPATHOBJ 0day漏洞(CVE-2013-3660)。该漏洞被黑客称为“提权神器”，可使木马病毒获得系统最高权限，瞬间“小偷变大盗”。此前，360安全卫士已针对该漏洞推出临时防御措施，保护用户安全度过补丁真空期。鉴于本月微软补丁数量多、修复的漏洞危害等级高，石晓虹博士建议电脑用户尽快安装补丁，降低系统感染恶意代码的风险。由于企业内网集体打补丁会占用较多出口带宽，推荐使用360企业版等具备“统一打补丁”功能的安全软件，帮助企业用户轻松管理内网机器的补丁更新和安装，避免出现网络拥堵情况。微软安全公告致谢360：https://technet.microsoft.com/en-us/security/bulletin/ms13-053附：微软2013年7月补丁信息1、微软.NET Framework及Silverlight远程代码执行漏洞安全公告：MS13-052级别：高危描述：本补丁修复了微软.NET Framework和微软Silverlight中存在的五处秘密报告的安全漏洞和两处已经被公开披露的安全漏洞，这些漏洞可能导致使用了特定代码的受信程序执行攻击者的恶意代码，安装恶意程序或窃取用户隐私影响软件：全系统/版本2、Windows内核模式驱动远程代码执行漏洞安全公告：MS13-053级别：高危描述：本补丁修复了Windows内核模式驱动中存在的两处已经被公开披露的安全漏洞和六处秘密报告的安全漏洞，这些漏洞可能导致当用户浏览嵌入了TrueType字体文件的内容时，引发攻击者的恶意代码得到执行，安装恶意程序或窃取隐私，或者可能被已经入侵系统的攻击者利用来提升权限，从而进一步控制整个系统。影响系统：全系统3、GDI+远程代码执行漏洞安全公告：MS13-054级别：高危描述：本补丁修复了GDI+组件中存在的一处秘密报告的安全漏洞，涉及的产品包括微软Windows、微软Office、微软Lync和微软Visual Studio，当使用存在漏洞软件的用户浏览一个嵌入了攻击者精心构造的TrueType字体文件的内容时，可能引发攻击者的恶意代码得到执行，安装恶意程序或窃取用户隐私。影响软件：Windows全系统；Office:2003/2007/2010；VS:VS 2003 ；Lync 2010/20134、IE积累性安全更新安全公告：MS13-055级别：高危描述：本补丁修复了IE浏览器中存在的十七处秘密报告的安全漏洞，当存在漏洞的用户访问一个攻击者精心构造的恶意网站时，可能引发攻击者的恶意代码得到执行，安装恶意程序或窃取用户隐私。影响系统：全系统5、微软DirectShow远程代码执行漏洞安全公告：MS13-056级别：高危描述：本补丁修复了微软DirectShow组件中存在的一处秘密报告的远程代码执行漏洞，当存在漏洞的用户打开一个攻击者精心构造的图片文件时，可能引发攻击者的恶意代码得到执行，安装恶意程序或窃取用户隐私。影响系统：XP/2003/VISTA/WIN7/WIN8/2008 R2/20126、Windows媒体格式运行时远程代码执行漏洞安全公告：MS13-057级别：高危描述：本补丁修复了微软Windows媒体格式运行时中存在的一处秘密报告的安全漏洞，当存在漏洞的用户打开一个攻击者精心构造的媒体文件时，可能引发攻击者的恶意代码得到执行，安装恶意程序或窃取用户隐私。影响系统：全系统7、Windows Defender权限提升漏洞安全公告：MS13-058级别：重要描述：本补丁修复了Windows Defender中存在的一处秘密报告的安全漏洞，已经入侵系统的攻击者可能利用此漏洞提升权限，从而进一步控制整个系统。影响软件：Windows7/Windows 7 SP1/2008 R2 X64 SP1&lt;/p>
- /posts/zz_360_captured_for_microsoft_windows_vulnerability_tenth_thanks/ - This is a customized copyright.</description></item><item><title>kerberos中wrong principal in request的一个可能原因，#define KRB5KRB_AP_WRONG_PRINC (-1765328240L)</title><link>/posts/kerberos_the_wrong_principal_in_one_of_the_possible_causes_request__define_krb5krb_ap_wrong_princ_-1765328240l/</link><pubDate>Thu, 19 Sep 2013 18:56:00 +0000</pubDate><guid>/posts/kerberos_the_wrong_principal_in_one_of_the_possible_causes_request__define_krb5krb_ap_wrong_princ_-1765328240l/</guid><description>seteuid0's blog /posts/kerberos_the_wrong_principal_in_one_of_the_possible_causes_request__define_krb5krb_ap_wrong_princ_-1765328240l/ -&lt;p>最近配置kerberos，配置后用sclient测试的时候遇到wrong principal in request，搜了下没有找到解决办法，用gdb调了下发现原来是我的主机名配置的有问题。错误信息如下。修复方式为：如使用kerberos.example.com则主机名也为kerberos.example.com主机名的修改方式为：Fedora上是修改&amp;quot;/etc/hostname&amp;quot;  文件rhel主机名配置为/etc/sysconfig/network&lt;/p>
- /posts/kerberos_the_wrong_principal_in_one_of_the_possible_causes_request__define_krb5krb_ap_wrong_princ_-1765328240l/ - This is a customized copyright.</description></item><item><title>[zz]Fedora 18的变化</title><link>/posts/zz_changes_in_fedora_18/</link><pubDate>Thu, 19 Sep 2013 15:39:00 +0000</pubDate><guid>/posts/zz_changes_in_fedora_18/</guid><description>seteuid0's blog /posts/zz_changes_in_fedora_18/ -&lt;p>fedora每次发布新版本都会发生巨变，本次变化&amp;ndash;/etc/sysconfig 已停止使用/etc/sysconfig/clock 由 /etc/localtime 代替/etc/sysconfig/i18n 已由 /etc/locale.conf 代替/etc/sysconfig/keyboard 变为 /etc/vconsole.conf主机名配置由 /etc/sysconfig/network 移至 /etc/hostnameFedora 18 支持 UEFI 安全引导。即在启用了安全引导的计算机上能够引导 Fedora.有工具可让管理员创建自定义证书，以签署本地环境下对 GRUB 和内核的修改。通过默认启用 rngd 改善了随机数生成。使用 SELinux 和 virt-sandbox 后，服务可在安全沙盒中运行，即使是 root 用户也是如此。virt-sandbox-service 软件包将创建挂载点和 libvirt 容器。现在有了 libseccomp 库，提供给应用程序一个简单的方式来减少误用内核 kernel syscall 过滤器带来的伤害。得益于此，虚拟机软件比如 QEMU/KVM 已经开始使用 libseccomp 了。usermode,一个为无特权用户提供特权访问的封装器，已经被更好的 polkit 所取代。Fedora 18 将 Kerberos 证书缓存的标准位置变更到 /run/user/$UID 来增强安全性并简化用于 NFSv4 的缓存的定位。Fedora 的 Kerberos 支持将允许用户维护适用于多个身份的证书，且允许GSSAPI 客户端代码可以依据目标服务和主机名自动选择证书。无特权用户能否使用 halt（8）， poweroff（8） 和 reboot（8） 命令现在由 polkit 控制。参看 /usr/share/polkit-1/actions/org.freedesktop.login1.policy 中的行为描述。将不再使用放置在 /etc/pam.d/{halt,poweroff,reboot} 中的 PAM 配置文件。里面的内容，如果有的话，也将被忽略。Fedora 18 新增 FedFS,该程序用来为多个文件服务器提供一致的命名空间。/tmp 默认会位于 tempfs.较大的临时文件会存储在 /var/tmp.这样可以减少磁盘产生的输入输出。从而延长了 SSD 寿命，节约了功耗并提高了 /tmp 文件系统的性能。Fedora 18 为在服务器中常见的 GPU 提供了 KernelMode Setting （KMS） 驱动支持。这些 GPU 的用户现在可以享用由 KMS 驱动带来的额外功能，包括在虚拟终端中的强化图形功能。新的 KMS 驱动支持包括基于 ServerEngines 的AST和 MGA 芯片组。X.org 服务器得到了重构来支持 GPU 热插拔。具体来说，这将允许 Fedora 更好的支持通过 USB 连接的外置图形设备，常见于各种现代系统和笔记本底座中。用户不再需要重启 X.org 服务来识别这些设备了。切换显示管理器不再需要编辑 /etc/sysconfig/desktop 文件。只需使用命令：systemctlenable &amp;ndash;force displaymanager.service 就可以启用您所选择的已安装的显示管理器。面向 Fedora 18 的 MATE 桌面 首次发布。它为用户带来了期望已久的经典、直观且易用的桌面体验。Fedora 对 MATE&amp;gt;的支持通过 #fedora-mate 和 #mate 提供。这两个 irc 频道位于irc.freenode.net 或者通过 Fedora 的 bugzilla.简体中文默认引擎变为 ibus-libpinyin&lt;/p>
- /posts/zz_changes_in_fedora_18/ - This is a customized copyright.</description></item></channel></rss>